---
name: Pull request verification

on:
  pull_request:
  workflow_dispatch:

env:
  JAVA_DISTRIBUTION: 'temurin'
  JAVA_VERSION: '17'

jobs:
  bugzilla_check:
    name: bugzilla reference check
    runs-on: ubuntu-latest
    container:
      image: fedora:38
    steps:
      - name: Mask secrets
        shell: bash
        run: |
          echo "::add-mask::${{ secrets.GITHUB_TOKEN }}"

      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install packages
        shell: bash
        run: dnf --setopt install_weak_deps=False install -y python3 python3-pip python3-requests

      - name: Install python dependencies
        run: pip install python-bugzilla

      - name: Run bugzilla reference check
        run: ./.github/scripts/bugzilla_reference_check.py
        env:
          GITHUB_TOKEN_PSW: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}

  checkstyle:
    runs-on: ubuntu-latest
    container:
      image: fedora:38
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install dependencies
        shell: bash
        run: dnf --setopt install_weak_deps=False install -y gettext jss

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}

      - name: Run checkstyle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: checkstyle

  unit_tests:
    name: unit tests
    runs-on: ubuntu-latest
    container:
      image: fedora:38
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install dependencies
        shell: bash
        run: dnf --setopt install_weak_deps=False install -y gettext jss

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}

      - name: Run unit tests
        uses: gradle/gradle-build-action@v2
        with:
          arguments: test

  validate_translations:
    runs-on: ubuntu-latest
    container:
      image: fedora:38
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install dependencies
        shell: bash
        run: dnf --setopt install_weak_deps=False install -y gettext jss

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}

      - name: Run checkstyle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: validate_translation

  woke:
    name: woke
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Run woke
        uses: get-woke/woke-action@v0
        with:
          # Cause the check to fail on any broke rules
          fail-on-error: true

  build_image:
    name: build image
    runs-on: ubuntu-latest
    steps:
      - name: Mask secrets
        shell: bash
        run: |
          echo "::add-mask::${{ secrets.GITHUB_TOKEN }}"

      - name: Check out repository
        uses: actions/checkout@v3

      - name: 'Login to GitHub Container Registry'
          uses: docker/login-action@v2
          with:
            registry: ghcr.io
            username: ${{github.actor}}
            password: ${{secrets.GITHUB_TOKEN}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ../../containers/candlepin-base-cs9
          push: true
          tags: candlepin/pr-${{ github.event.pull_request.number }}:latest

  # https://docs.github.com/en/actions/using-containerized-services/creating-postgresql-service-containers
  postgres_standalone_spec_tests:
    name: spec tests for standalone candlepin using postgres
    runs-on: ubuntu-latest
    needs: build_image

    services:
      postgres:
        image: postgres
          env:
            POSTGRES_DB: candlepin
            POSTGRES_USER: candlepin
            POSTGRES_PASSWORD: candlepin
          ports:
            - 5432:5432
          options: >-
            --health-cmd pg_isready
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5