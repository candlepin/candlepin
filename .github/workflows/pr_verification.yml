---
name: Pull request verification

on:
  pull_request:
  workflow_dispatch:
  merge_group:

env:
  CI: 'true'
  JAVA_DISTRIBUTION: 'temurin'
  JAVA_VERSION: '11'

# Cancel in-progress PR verification workflows. We only care about verifying the latest commit.
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  bugzilla_check:
    name: bugzilla reference check
    runs-on: ubuntu-latest
    steps:
      - name: Mask secrets
        shell: bash
        run: |
          echo "::add-mask::${{ secrets.GITHUB_TOKEN }}"

      - name: Install packages
        shell: bash
        run: sudo apt-get install -y python3 python3-pip python3-requests git-core

      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
          set-safe-directory: true

      - name: Rebase
        uses: ./.github/actions/rebase

      - name: Install python dependencies
        run: pip install python-bugzilla

      - name: Run bugzilla reference check
        run: ./.github/scripts/bugzilla_reference_check.py
        env:
          GITHUB_TOKEN_PSW: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}

  checkstyle:
    runs-on: ubuntu-latest
    container:
      image: fedora:37
    steps:
      - name: Install dependencies
        shell: bash
        run: dnf --setopt install_weak_deps=False install -y gettext git-core jss

      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Rebase
        uses: ./.github/actions/rebase

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}

      - name: Run checkstyle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: checkstyle

  unit_tests:
    name: unit tests
    runs-on: ubuntu-latest
    container:
      image: fedora:37
    steps:
      - name: Install dependencies
        shell: bash
        run: dnf --setopt install_weak_deps=False install -y gettext jss git-core

      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Rebase
        uses: ./.github/actions/rebase
        
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}

      - name: Run unit tests
        uses: gradle/gradle-build-action@v2
        with:
          arguments: test coverage

      - name: Archive reports
        uses: actions/upload-artifact@v3
        with:
          name: unit_test_reports
          path: |
            **/build/**/jacoco*.xml

  validate_translations:
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        shell: bash
        run: sudo apt-get install -y gettext git-core

      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Rebase
        uses: ./.github/actions/rebase

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}

      - name: Run validate translation
        uses: gradle/gradle-build-action@v2
        with:
          arguments: validate_translation

  spec_tests:
    name: spec tests
    runs-on: ubuntu-latest
    container:
      image: fedora:37
      options: --privileged
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        database: [postgres, mariadb]
        mode: [standalone, hosted]

    steps:
      - name: Install dependencies
        shell: bash
        run: |
          dnf -y --setopt install_weak_deps=False update
          dnf --setopt install_weak_deps=False install -y gettext jss docker git-core

      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Rebase
        uses: ./.github/actions/rebase

      - name: Install docker compose
        shell: bash
        run: |
          DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
          mkdir -p $DOCKER_CONFIG/cli-plugins
          curl -SL https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
          sudo chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose

      - name: Set up Docker Buildx
        if: ${{ github.event.pull_request.head.repo.fork }}
        uses: docker/setup-buildx-action@v2

      - if: matrix.mode == 'standalone'
        name: Add standalone env variable
        working-directory: ./.github/containers
        shell: bash
        run: |
          echo "CANDLEPIN_STANDALONE=true" > .env
          echo "CANDLEPIN_AUTH_CLOUD_ENABLE=false" >> .env

      - if: matrix.mode == 'hosted'
        name: Add hosted env variables
        working-directory: ./.github/containers
        shell: bash
        run: |
          echo "CANDLEPIN_STANDALONE=false" > .env
          echo "MODULE_CONFIG_HOSTED_CONFIGURATION_MODULE=org.candlepin.hostedtest.AdapterOverrideModule" >> .env
          echo "CANDLEPIN_AUTH_CLOUD_ENABLE=true" >> .env

      - name: Create Candlepin and database containers
        shell: bash
        run: |
          BRIDGE_NETWORK=$(docker network ls --filter=name=github_network_ --format="{{ .Name }}")
          echo "NETWORK=$BRIDGE_NETWORK" >> ./.github/containers/.env
          docker compose -f ./.github/containers/${{ matrix.database }}.docker-compose.yml --env-file ./.github/containers/.env up --build -d --wait

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}

      - name: Run Spec tests
        uses: gradle/gradle-build-action@v2
        with:
          arguments: spec -Dspec.test.client.host=candlepin
          
      - name: Collect docker logs on failure
        if: failure()
        uses: jwalton/gh-docker-logs@4599896f4f5414b2444c1512096809da191c9e81
        with:
          dest: './logs-${{ matrix.database }}-${{ matrix.mode }}'

      - name: Collect Candlepin and Tomcat logs on failure
        if: failure()
        shell: bash
        run: | 
          docker cp candlepin:/var/log/candlepin/ ./logs-${{ matrix.database }}-${{ matrix.mode }}/candlepin/
          docker cp candlepin:/opt/tomcat/logs/ ./logs-${{ matrix.database }}-${{ matrix.mode }}/tomcat/
          
      - name: Collect postgress logs on failure
        if: failure() && matrix.database == 'postgres'
        run:  docker cp postgres:/var/log/postgresql/ ./logs-${{ matrix.database }}-${{ matrix.mode }}/postgresql/

      - name: Collect mariadb logs on failure
        if: failure() && matrix.database == 'mariadb'
        run:  docker cp mariadb:/var/log/mysql/ ./logs-${{ matrix.database }}-${{ matrix.mode }}/mysql/

      - name: Tar logs
        if: failure()
        run: sudo tar cvzf ./logs-${{ matrix.database }}-${{ matrix.mode }}.tgz ./logs-${{ matrix.database }}-${{ matrix.mode }}

      - name: Upload logs to GitHub
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: logs-${{ matrix.database }}-${{ matrix.mode }}.tgz
          path: ./logs-${{ matrix.database }}-${{ matrix.mode }}.tgz

      - if: always()
        name: Stop containers
        shell: bash
        run: docker compose -f ./.github/containers/${{ matrix.database }}.docker-compose.yml down
