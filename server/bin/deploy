#!/bin/bash

APP_DB_NAME="candlepin"
MAX_STARTUP_WAIT_TIME=30

gendb() {
    if [ "$USE_ORACLE" == "1" ]; then
        init_oracle_jdbc $APP_DB_NAME
        [ -z "$DBPASSWORD" ] && DBPASSWORD="candlepin"
    elif [ "$USE_MYSQL" == "1" ]; then
        init_mysql_jdbc $APP_DB_NAME
    else
        init_postgresql_jdbc $APP_DB_NAME
    fi

    if [ "$GENDB" == "1" ]; then
        MESSAGE="Generating New Database"
        CHANGELOG="changelog-create.xml"
        if [ "$USE_ORACLE" == "1" ]; then
            recreate_oracle $APP_DB_NAME $DBUSER
        elif [ "$USE_MYSQL" == "1" ]; then
            recreate_mysql $APP_DB_NAME $DBUSER
        else
            recreate_postgresql $APP_DB_NAME $DBUSER
        fi

        # New database implies we probably don't want any events left laying around in the
        # queue to fire:
        info_msg "Cleaning hornetq journal"
        $SUDO rm -rf /var/lib/candlepin/hornetq/*
    else
        MESSAGE="Updating Database"
        CHANGELOG="changelog-update.xml"
    fi

    info_msg "$MESSAGE"
    LQCOMMAND="liquibase --driver=${JDBC_DRIVER} --classpath=$PROJECT_DIR/src/main/resources/:target/classes/:${JDBC_JAR} --changeLogFile=db/changelog/$CHANGELOG --url=${JDBC_URL} --username=candlepin"
    if [ -n "$DBPASSWORD" ] ; then
        LQCOMMAND="$LQCOMMAND --password=$DBPASSWORD "
    fi

    if [ "$VERBOSE" == "1" ]; then
        LQCOMMAND="$LQCOMMAND --logLevel=debug "
    fi

    LQCOMMAND="$LQCOMMAND update -Dcommunity=True"
    (cd $PROJECT_DIR && $LQCOMMAND)
    evalrc $? "Liquibase command failed"
}

deploy() {
  VERSION="$(grep Version: $PROJECT_DIR/candlepin.spec.tmpl | cut --delim=' ' -f2)"
    if [ -z $CLEAN ] ; then
        $SUDO rm -rf $DEPLOY
    else
        $SUDO rm -rf $CLEAN
    fi
    $SUDO cp $PROJECT_DIR/target/candlepin-$VERSION.war $DEPLOY
}

stopappserver() {
    # tc rpm /sbin/service tomcat6 stop
    # tc opt $TC_HOME/bin/catalina.sh stop
    # jboss opt $JBOSS_HOME/bin/shutdown.sh
    $STOP
}

isrpm() {
    echo $1 | grep "var/lib" > /dev/null
    return $?
}


update_keystore() {
    if [ ! -f $CONTAINER_CONF_DIR/keystore ]; then
        info_msg "Symlinking keystore for tomcat"
        $SUDO ln -s /etc/candlepin/certs/keystore $CONTAINER_CONF_DIR/keystore
    else
        if [ ! -L "$CONTAINER_CONF_DIR/keystore" -a "$(readlink $CONTAINER_CONF_DIR/keystore)" != "/etc/candlepin/certs/keystore" ]; then
          warn_msg "Using existing keystore"
        fi
        local candlepin_fp="$(fp_pkcs12 "/etc/candlepin/certs/keystore" "tomcat" "password")"
        local tomcat_fp="$(fp_pkcs12 "$CONTAINER_CONF_DIR/keystore" "tomcat" "password")"
        if [ "$candlepin_fp" != "$tomcat_fp" ]; then
          err_msg "The keys in the Tomcat keystore don't match Candlepin's!"
        fi
    fi
}

upload_products() {
  if [ "$TESTDATA" = "1" ]; then
      $SELF_DIR/import_test_data.rb $SELF_DIR/test_data.json
  elif [ "$TESTDATA" = "MIN" ]; then
      $SELF_DIR/import_test_data.rb $SELF_DIR/min_test_data.json
  fi
}

create_var_lib_candlepin() {
    $SUDO mkdir -p /var/lib/candlepin
    $SUDO chown tomcat:tomcat /var/lib/candlepin
}

create_var_log_candlepin() {
    $SUDO mkdir -p /var/log/candlepin
    $SUDO chown tomcat:tomcat /var/log/candlepin
}

create_var_cache_candlepin() {
    $SUDO mkdir -p /var/cache/candlepin
    $SUDO chown tomcat:tomcat /var/cache/candlepin
}

autoconf() {
  buildr -s -e $1 app_db_name=$APP_DB_NAME erb $2 $3

  if [ "$?" -ne "0" ]; then
    err_msg "ERROR: candlepin.conf generation failed!"
    return 1
  fi

  CANDLEPIN_CONF="/etc/candlepin/candlepin.conf"

  if [ ! -e $CANDLEPIN_CONF ] || $($SUDO head -n 1 $CANDLEPIN_CONF | grep -q "AUTOGENERATED"); then
    $SUDO cp $PROJECT_DIR/target/generated/erb/candlepin.conf $CANDLEPIN_CONF
  else
    warn_msg "Your candlepin.conf does not appear to be autogenerated.  Cowardly refusing to overwrite."
  fi
}

usage() {
    cat <<HELP
usage: deploy [options]

OPTIONS:
  -f          force cert regeneration
  -g          generate database
  -q          Qpid enabled. Also deploys 'allmsg' queue used by spec tests
  -t          import test data
  -T          import minimal test data, some owners, users, and roles
  -H          include test resources for hosted mode
  -o          use Oracle
  -l          use Logdriver
  -m          use MySQL
  -a          auto-deploy a generated candlepin.conf
  -v          verbose output
  -d <name>   specify a database name to use when creating or updating the
              Candlepin database
HELP
}

notify() {
    if [ -z "$QUIET" ]; then
        if type notify-send &> /dev/null; then
            notify-send -i info -t 2000 "Deployment complete!"
        fi
        echo
        success_msg "Deployment complete!"
    fi
}

initialize_cp() {
    info_msg "Initializing Candlepin..."
    wget --no-check-certificate -qO- https://localhost:8443/candlepin/admin/init
    echo
}

init() {
    # Read in user defined variables
    if [ -f $HOME/.candlepinrc ] ; then
        source $HOME/.candlepinrc
    fi

    # Source useful bash functions
    source "$(buildr -s checkout_root)/bin/bash_functions"

    PROJECT_DIR="$(project_directory server)"

    # Get the directory this script is in. See http://mywiki.wooledge.org/BashFAQ/028
    SELF_DIR="${BASH_SOURCE%/*}"
}

### Main

# Abort on errors
set -e

init

DBUSER="candlepin"

while getopts ":fqgtTHolmavd:" opt; do
    case $opt in
        f  ) FORCECERT="1" ;;
        g  ) GENDB="1";;
        H  ) HOSTEDTEST="hostedtest";;
        q  ) QPID="qpid";;
        t  ) TESTDATA="1";;
        T  ) TESTDATA="MIN";;
        o  ) USE_ORACLE="1";;
        l  ) LOGDRIVER="logdriver";;
        m  ) USE_MYSQL="1";;
        a  ) AUTOCONF="1";;
        v  ) VERBOSE="1";;
        d  ) APP_DB_NAME="${OPTARG}";;
        ?  ) usage; exit;;
    esac
done

shift $(($OPTIND - 1))

if [ "$USE_ORACLE" == "1" -a "$USE_MYSQL" == "1" ]; then
    err_msg "You can't use Oracle and MySQL at the same time."
    exit 1
fi

if [ $(id -u) -ne 0 ]; then
    if ( command -v sudo >/dev/null 2>&1 ) then
        SUDO="sudo"
    else
        echo "WARNING: sudo is not available. This command may need to be re-run with root access to complete successfully." >&2
    fi
fi

if [ "$JBOSS_HOME" != "" ]; then
    # we're using JBOSS AS
    isrpm $JBOSS_HOME

    if [ "$?" -ne 0 ]; then
        START="$JBOSS_HOME/bin/run.sh 2>&1 > console.log &"
        STOP="$JBOSS_HOME/bin/shutdown.sh --shutdown"
        DEPLOY="$JBOSS_HOME/server/default/deploy/"
    else
        START="$SUDO /sbin/service jbossas start"
        STOP="$SUDO /sbin/service jbossas stop"
        DEPLOY="$JBOSS_HOME/server/default/deploy/"
    fi

    CONTAINER_CONF_DIR="$JBOSS_HOME/conf"
    CLEAN="$JBOSS_HOME/server/default/deploy/candlepin*"
else
    # use tomcat 6, unless it doesnt exist and tomcat does
    TC=tomcat6
    if ( [ -f /usr/sbin/tomcat ] && (! [ -f /usr/sbin/tomcat6 ] ) );
    then
        TC=tomcat
    fi
    if [ -z $TC_HOME ]; then
        TC_HOME=/var/lib/$TC
    fi

    isrpm $TC_HOME

    if [ "$?" -ne 0 ]; then
        START="$TC_HOME/bin/catalina.sh jpda start"
        STOP="$TC_HOME/bin/catalina.sh stop"
        CONTAINER_CONF_DIR="$TC_HOME/conf"
    else
        START="$SUDO /sbin/service $TC start"
        STOP="$SUDO /sbin/service $TC stop"
        CONTAINER_CONF_DIR="/etc/$TC"
    fi

    # Check if we're in a container using supervisord instead:
    if [ "$SUPERVISOR" == "1" ]; then
        START="supervisorctl start tomcat"
        STOP="supervisorctl stop tomcat"
    fi

    DEPLOY="$TC_HOME/webapps/candlepin.war"
    CLEAN="$TC_HOME/webapps/candlepin/"
fi

# stop the appserver
eval $STOP

# generate the postgresql DB
if [ "$LOGDRIVER" == "logdriver" ]; then
    info_msg "Using logdriver"
    LOGDRIVER="logdriver=yes"
else
    LOGDRIVER=""
fi

if [ "$HOSTEDTEST" == "hostedtest" ]; then
    info_msg "Including hostedtest resources"
    info_msg "WARNING: DO NOT SPEC TEST IN PARALLEL MODE"
    HOSTEDTEST="hostedtest=yes"
else
    HOSTEDTEST=""
fi

# Delete the allmsg Qpid queue. The error messages produced during
# deletion are silenced
# This deletion is attempted regardless of whether Qpid is enabled. We do that
# to prevent the queue to grow indefinitely
QPID_KEYS_DIR=$PROJECT_DIR/../server/bin/qpid/keys

if [ "$QPID" == "qpid" ]; then
    info_msg "Enable Qpid"

    if [ "$FORCECERT" == "1" ]; then
        # clean qpid certs
        $PROJECT_DIR/bin/qpid/configure-qpid.sh -c
    fi
    $PROJECT_DIR/bin/qpid/configure-qpid.sh

    QPID="qpid=true"

    qpid-config -b amqps://localhost:5671 --ssl-certificate $QPID_KEYS_DIR/qpid_ca.crt --ssl-key $QPID_KEYS_DIR/qpid_ca.key --force del queue allmsg 2 > /dev/null || true
    qpid-config -b amqps://localhost:5671 --ssl-certificate $QPID_KEYS_DIR/qpid_ca.crt --ssl-key $QPID_KEYS_DIR/qpid_ca.key --force del queue flowStopQueue 2 > /dev/null || true

    #Setup testing qpid queue allmsg, this will be needed by Qpid spec tests
    qpid-config -b amqps://localhost:5671 --ssl-certificate $QPID_KEYS_DIR/qpid_ca.crt --ssl-key $QPID_KEYS_DIR/qpid_ca.key add queue allmsg --durable
    qpid-config -b amqps://localhost:5671 --ssl-certificate $QPID_KEYS_DIR/qpid_ca.crt --ssl-key $QPID_KEYS_DIR/qpid_ca.key bind event allmsg "#"
else
    QPID=""
fi


if [ "$USE_ORACLE" == "1" ]; then
    info_msg "Building with Oracle JDBC jar"
    ENV_BUILDR="oracle"
elif [ "$USE_MYSQL" == "1" ]; then
    ENV_BUILDR="mysql"
else
    # "development" is the default buildr environment.  It has been aliased to the postgresql environment
    # in profiles.yaml
    ENV_BUILDR="development"
fi

buildr -s -e $ENV_BUILDR clean package test=no app_db_name=$APP_DB_NAME $LOGDRIVER $HOSTEDTEST

if [ "$?" -ne "0" ]; then
  err_msg "ERROR: Compile failed."
  exit 1
fi

gendb

if [ "$FORCECERT" == "1" ]; then
    GEN_CERTS_ARGS="-f"
fi

# generate SSL certs if they are needed
bash $SELF_DIR/gen-certs $GEN_CERTS_ARGS

# update keystore file and put it into tomcat's conf directory
update_keystore

# update server.xml
$SUDO python $PROJECT_DIR/bin/update-server-xml.py $CONTAINER_CONF_DIR

create_var_lib_candlepin
create_var_log_candlepin
create_var_cache_candlepin

if [ "$AUTOCONF" == "1" ]; then
  autoconf $ENV_BUILDR $LOGDRIVER $HOSTEDTEST $QPID
fi

# deploy the webapp
deploy

eval $START

START_TIME=$(date +%s)

printf "Waiting for Candlepin to start..."
until curl -k -s "https://localhost:8443/candlepin/status" > /dev/null
do
    CURRENT_TIME=$(date +%s)
    ELAPSED_TIME=$((CURRENT_TIME - START_TIME))

    if [ "$ELAPSED_TIME" -gt "$MAX_STARTUP_WAIT_TIME" ]; then
        echo
        err_msg "Candlepin failed to start within $MAX_STARTUP_WAIT_TIME seconds. Aborting..."
        exit 1
    fi

    printf "."
    sleep 1
done
echo

initialize_cp

upload_products
notify
