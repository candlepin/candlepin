#!/bin/bash

gendb() {
    if [ "$USE_ORACLE" == "1" ]; then
        init_oracle_jdbc "candlepin"
        [ -z "$DBPASSWORD" ] && DBPASSWORD="candlepin"
    elif [ "$USE_MYSQL" == "1" ]; then
        init_mysql_jdbc "candlepin"
    else
        init_postgresql_jdbc "candlepin"
    fi

    if [ "$GENDB" == "1" ]; then
        MESSAGE="Generating New Database"
        CHANGELOG="changelog-create.xml"
        if [ "$USE_ORACLE" == "1" ]; then
            recreate_oracle "candlepin"
        elif [ "$USE_MYSQL" == "1" ]; then
            recreate_mysql "candlepin"
        else
            recreate_postgresql "candlepin"
        fi

        # New database implies we probably don't want any events left laying around in the
        # queue to fire:
        info_msg "Cleaning hornetq journal"
        sudo rm -rf /var/lib/candlepin/hornetq/*
    else
        MESSAGE="Updating Database"
        CHANGELOG="changelog-update.xml"
    fi

    info_msg "$MESSAGE"
    LQCOMMAND="liquibase --driver=${JDBC_DRIVER} --classpath=$PROJECT_DIR/src/main/resources/:target/classes/:${JDBC_JAR} --changeLogFile=db/changelog/$CHANGELOG --url=${JDBC_URL} --username=candlepin"
    if [ -n "$DBPASSWORD" ] ; then
        LQCOMMAND="$LQCOMMAND --password=$DBPASSWORD "
    fi
    LQCOMMAND="$LQCOMMAND update -Dcommunity=True"
    echo $LQCOMMAND
 #   (cd $PROJECT_DIR && $LQCOMMAND)
    evalrc $? "Liquibase command failed"
}

deploy() {
  VERSION="$(grep Version: $PROJECT_DIR/candlepin.spec | cut --delim=' ' -f2)"
    if [ -z $CLEAN ] ; then
        $SUDO rm -rf $DEPLOY
    else
        $SUDO rm -rf $CLEAN
    fi
    $SUDO cp $PROJECT_DIR/target/candlepin-$VERSION.war $DEPLOY
}

stopappserver() {
    # tc rpm /sbin/service tomcat6 stop
    # tc opt $TC_HOME/bin/catalina.sh stop
    # jboss opt $JBOSS_HOME/bin/shutdown.sh
    $STOP
}

isrpm() {
    echo $1 | grep "var/lib" > /dev/null
    return $?
}


update_keystore() {
    if [ ! -f $CONTAINER_CONF_DIR/keystore ]; then
        info_msg "Symlinking keystore for tomcat"
        sudo ln -s /etc/candlepin/certs/keystore $CONTAINER_CONF_DIR/keystore
    else
        if [ ! -L "$CONTAINER_CONF_DIR/keystore" -a "$(readlink $CONTAINER_CONF_DIR/keystore)" != "/etc/candlepin/certs/keystore" ]; then
          warn_msg "Using existing keystore"
        fi
        local candlepin_fp="$(fp_pkcs12 "/etc/candlepin/certs/keystore" "tomcat" "password")"
        local tomcat_fp="$(fp_pkcs12 "$CONTAINER_CONF_DIR/keystore" "tomcat" "password")"
        if [ "$candlepin_fp" != "$tomcat_fp" ]; then
          err_msg "The keys in the Tomcat keystore don't match Candlepin's!"
        fi
    fi
}

upload_products() {
  if [ "$TESTDATA" = "1" ]; then
      $SELF_DIR/import_products.rb $SELF_DIR/test_data.json
  fi
}

create_var_lib_candlepin() {
    sudo mkdir -p /var/lib/candlepin
    sudo chown tomcat:tomcat /var/lib/candlepin
}

create_var_log_candlepin() {
    sudo mkdir -p /var/log/candlepin
    sudo chown tomcat:tomcat /var/log/candlepin
}

create_var_cache_candlepin() {
    sudo mkdir -p /var/cache/candlepin
    sudo chown tomcat:tomcat /var/cache/candlepin
}

autoconf() {
  buildr -s -e $1 erb $2

  if [ "$?" -ne "0" ]; then
    err_msg "ERROR: candlepin.conf generation failed!"
    return 1
  fi

  CANDLEPIN_CONF="/etc/candlepin/candlepin.conf"

  if [ ! -e $CANDLEPIN_CONF ] || $(sudo head -n 1 $CANDLEPIN_CONF | grep -q "AUTOGENERATED"); then
    sudo cp $PROJECT_DIR/target/generated/erb/candlepin.conf $CANDLEPIN_CONF
  else
    warn_msg "Your candlepin.conf does not appear to be autogenerated.  Cowardly refusing to overwrite."
  fi
}

usage() {
    cat <<HELP
    usage: deploy [options]

    OPTIONS:
        -f  force cert regeneration
        -g  generate database
        -t  import test data
        -o  use Oracle
        -l  use Logdriver
        -m  use MySQL
        -a  auto-deploy a generated candlepin.conf
HELP
}

notify() {
    if [ -z "$QUIET" ]; then
        if type notify-send &> /dev/null; then
            notify-send -i info -t 2000 "Deployment complete!"
        fi
        echo
        success_msg "Deployment complete!"
    fi
}

initialize_cp() {
    info_msg "Initializing Candlepin..."
    wget --no-check-certificate -qO- https://localhost:8443/candlepin/admin/init
    echo
}

init() {
    # Read in user defined variables
    if [ -f $HOME/.candlepinrc ] ; then
        source $HOME/.candlepinrc
    fi

    # Source useful bash functions
    source "$(buildr -s checkout_root)/bin/bash_functions"

    PROJECT_DIR="$(project_directory server)"

    # Get the directory this script is in. See http://mywiki.wooledge.org/BashFAQ/028
    SELF_DIR="${BASH_SOURCE%/*}"
}

### Main

# Abort on errors
set -e

init

DBUSER="candlepin"

while getopts ":fgtolma" opt; do
    case $opt in
        f  ) FORCECERT="1" ;;
        g  ) GENDB="1";;
        t  ) TESTDATA="1";;
        o  ) USE_ORACLE="1";;
        l  ) LOGDRIVER="logdriver";;
        m  ) USE_MYSQL="1";;
        a  ) AUTOCONF="1";;
        ?  ) usage; exit;;
    esac
done

shift $(($OPTIND - 1))

if [ "$USE_ORACLE" == "1" -a "$USE_MYSQL" == "1" ]; then
    err_msg "You can't use Oracle and MySQL at the same time."
    exit 1
fi

if [ "$JBOSS_HOME" != "" ]; then
    # we're using JBOSS AS
    isrpm $JBOSS_HOME

    if [ "$?" -ne 0 ]; then
        START="$JBOSS_HOME/bin/run.sh 2>&1 > console.log &"
        STOP="$JBOSS_HOME/bin/shutdown.sh --shutdown"
        DEPLOY="$JBOSS_HOME/server/default/deploy/"
    else
        SUDO="sudo"
        START="sudo /sbin/service jbossas start"
        STOP="sudo /sbin/service jbossas stop"
        DEPLOY="$JBOSS_HOME/server/default/deploy/"
    fi
    CONTAINER_CONF_DIR="$JBOSS_HOME/conf"
    CLEAN="$JBOSS_HOME/server/default/deploy/candlepin*"
else
    # use tomcat 6, unless it doesnt exist and tomcat does
    TC=tomcat6
    if ( [ -f /usr/sbin/tomcat ] && (! [ -f /usr/sbin/tomcat6 ] ) );
    then
        TC=tomcat
    fi
    if [ -z $TC_HOME ]; then
        TC_HOME=/var/lib/$TC
    fi

    isrpm $TC_HOME

    if [ "$?" -ne 0 ]; then
        START="$TC_HOME/bin/catalina.sh jpda start"
        STOP="$TC_HOME/bin/catalina.sh stop"
        CONTAINER_CONF_DIR="$TC_HOME/conf"
    else
        SUDO="sudo"
        START="sudo /sbin/service $TC start"
        STOP="sudo /sbin/service $TC stop"
        CONTAINER_CONF_DIR="/etc/$TC"
    fi

    # Check if we're in a container using supervisord instead:
    if [ "$SUPERVISOR" == "1" ]; then
        START="supervisorctl start tomcat"
        STOP="supervisorctl stop tomcat"
    fi

    DEPLOY="$TC_HOME/webapps/candlepin.war"
    CLEAN="$TC_HOME/webapps/candlepin/"
fi

# stop the appserver
eval $STOP

# generate the postgresql DB
if [ "$LOGDRIVER" == "logdriver" ]; then
    info_msg "Using logdriver"
    LOGDRIVER="logdriver=yes"
else
    LOGDRIVER=""
fi

if [ "$USE_ORACLE" == "1" ]; then
    info_msg "Building with Oracle JDBC jar"
    ENV_BUILDR="oracle"
elif [ "$USE_MYSQL" == "1" ]; then
    ENV_BUILDR="mysql"
else
    # "development" is the default buildr environment.  It has been aliased to the postgresql environment
    # in profiles.yaml
    ENV_BUILDR="development"
fi

buildr -s -e $ENV_BUILDR clean package test=no $LOGDRIVER

if [ "$?" -ne "0" ]; then
  err_msg "ERROR: Compile failed."
  exit 1
fi

gendb

if [ "$FORCECERT" == "1" ]; then
    GEN_CERTS_ARGS="-f"
fi

# generate SSL certs if they are needed
bash $SELF_DIR/gen-certs $GEN_CERTS_ARGS

# update keystore file and put it into tomcat's conf directory
update_keystore

# update server.xml
sudo python $PROJECT_DIR/bin/update-server-xml.py $CONTAINER_CONF_DIR

create_var_lib_candlepin
create_var_log_candlepin
create_var_cache_candlepin

if [ "$AUTOCONF" == "1" ]; then
  autoconf $ENV_BUILDR $LOGDRIVER
fi

# deploy the webapp
deploy

eval $START

sleep 10
initialize_cp

upload_products
notify
