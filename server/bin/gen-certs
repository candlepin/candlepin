#!/bin/bash -x

CERTS_HOME=/etc/candlepin/certs
UPSTREAM_CERTS_HOME=$CERTS_HOME/upstream

KEYSTORE_PASSWORD=$CERTS_HOME/keystore-password.txt
CA_KEY=$CERTS_HOME/candlepin-ca.key
CA_KEY_PASSWORD=$CERTS_HOME/candlepin-ca-password.txt

CA_REDHAT_CERT=server/conf/candlepin-redhat-ca.crt
CA_UPSTREAM_CERT=$UPSTREAM_CERTS_HOME/candlepin-redhat-ca.crt
CA_CERT_BASE=$CERTS_HOME/candlepin-ca
CA_CERT=$CA_CERT_BASE.crt
CA_CERT_CSR=$CA_CERT_BASE.csr
CA_CERT_P7=$CA_CERT_BASE.p7
# private?
CA_KEY=$CA_CERT_BASE.key
CA_PUB_KEY=$CERTS_HOME/candlepin-ca-pub.key
# for mod_ssl testing
SERVER_KEY_PASSWORD=$CERTS_HOME/candlepin-server-password.txt
SERVER_KEY=$CERTS_HOME/candlepin-server.key
SERVER_KEY_FULL=$SERVER_KEY.orig
SERVER_CERT_BASE=$CERTS_HOME/candlepin-server
SERVER_CERT=$SERVER_CERT_BASE.crt
SERVER_CERT_CSR=$SERVER_CERT_BASE.csr
SERVER_CERT_P7=$SERVER_CERT_BASE.p7

TOMCAT_SERVER_CERT_BASE=$CERTS_HOME/candlepin-apache-server
TOMCAT_SERVER_CERT=$TOMCAT_SERVER_CERT_BASE.crt
TOMCAT_SERVER_CERT_CSR=$TOMCAT_SERVER_CERT_BASE.csr

KEYSTORE=$CERTS_HOME/keystore
STORETYPE="JKS"
KEYSTORE_PASS=password
# these need to be the same, see
# http://tomcat.apache.org/tomcat-6.0-doc/ssl-howto.html
KEY_PASS=$KEYSTORE_PASS


HOSTNAME=${HOSTNAME:-$(hostname)}
USERNAME=${USERNAME:-$USER)}

CANDLEPIN_CA_ALIAS="candlepin-ca"
CANDLEPIN_CA_CN="${USERNAME}@${HOSTNAME}"
CANDLEPIN_CA_SUBJ="/CN=${CANDLEPIN_CA_CN}/OU=Candlepin CA/O=candlepinproject.org/"

OPENSSL_CONF=${OPENSSL_CONF:-/etc/pki/tls/openssl.cnf}


while getopts ":f" opt; do
    case $opt in
        f  ) FORCECERT="1" ;;
        v  ) VERBOSE="1" ;;
    esac
done

shift $(($OPTIND - 1))

if [ $(id -u) -ne 0 ]; then
    if ( command -v sudo >/dev/null 2>&1 ) then
        SUDO="sudo"
    else
        echo "WARNING: sudo is not available. This command may need to be re-run with root access to complete successfully." >&2
    fi
fi



rpm -q openssl > /dev/null
if [ "$?" -ne 0 ]; then
    echo "Certificate generation failed - please install openssl."
    exit 1
fi

if [ ! -d $CERTS_HOME ]; then
    echo "Creating $CERTS_HOME"
    $SUDO mkdir -p $CERTS_HOME
fi
if [ ! -d $UPSTREAM_CERTS_HOME ]; then
    echo "Creating $UPSTREAM_CERTS_HOME"
    $SUDO mkdir -p $UPSTREAM_CERTS_HOME
fi


if [ -f $CA_KEY ] && [ -f $CA_CERT ] && [ "$FORCECERT" != "1" ]; then
    echo "Certificates are already present."
else
    echo
    echo "Creating CA private key password"
    sudo su -c "echo $RANDOM > $CA_KEY_PASSWORD"

    echo
    echo "Creating CA private key"
    sudo openssl genrsa -out $CA_KEY -passout "file:$CA_KEY_PASSWORD" 1024

    echo
    echo "Creating CA public key"
    sudo openssl rsa -pubout -in $CA_KEY -out $CA_PUB_KEY

    echo
    echo "Creating CA csr"
    # this openssl.cnf is
    sudo openssl req -config $OPENSSL_CONF -new -days 365 -key $CA_KEY -out $CA_CERT_CSR \
       -subj "$CANDLEPIN_CA_SUBJ" \
       -extensions v3_ca

    echo
    echo "Creating CA certificate"
#    sudo openssl req -new -x509 -days 365 -key $CA_KEY -out $CA_CERT -subj \
#        "/O=candlepinproject.org/OU=Candlepin CA/"
    # this openssl.cnf is tweak to let us use lets DN info for our CA cert and signing requests
    sudo openssl x509 -extfile $OPENSSL_CONF -extensions v3_ca \
        -trustout -signkey $CA_KEY -days 365 -req -in $CA_CERT_CSR -out $CA_CERT

    echo
    echo "Creating apache server certs"
    echo "Creating apache server private key password"
    sudo su -c "echo $RANDOM > $SERVER_KEY_PASSWORD"

    echo
    echo "Creating apache server cert private key"
    sudo openssl genrsa -out $SERVER_KEY -passout "file:$SERVER_KEY_PASSWORD" 1024
    sudo cp $SERVER_KEY $SERVER_KEY_FULL

    echo
    echo "Creating apache/mod_ssl server cert signing request"
    sudo openssl req -new -key $SERVER_KEY_FULL -out $SERVER_CERT_CSR \
        -subj "/CN=$HOSTNAME/O=candlepinproject.org/" -nodes \
        -config $OPENSSL_CONF -extensions v3_req
    sudo openssl rsa -in $SERVER_KEY_FULL -out $SERVER_KEY

    echo
    echo "Creating apache server cert, signing with CA key"
    #sudo openssl ca -in $SERVER_CERT_REQ -cert $CA_CERT -keyfile $CA_KEY -out $SERVER_CERT
    sudo openssl x509 -req -days 365 -in $SERVER_CERT_CSR -CA $CA_CERT -CAkey $CA_KEY \
        -CAcreateserial -out $SERVER_CERT \
        -extfile $OPENSSL_CONF -extensions usr_cert

    echo
    echo "Verifying apache server cert"
    sudo openssl verify -purpose sslserver -CAfile $CA_CERT $SERVER_CERT

#     echo
#     echo "import $SERVER_CERT server cert into candlepin keystore"
     # import pck7 version into keystore?
#     sudo keytool -importcert -trustcacerts -v -v -v -keystore $KEYSTORE \
#        -storepass $KEYSTORE_PASS  -file $SERVER_CERT  -alias "tomcat" \
#        -keypass $KEY_PASS -storetype $STORETYPE
    
    
    #echo "Adding the CA cert to tomcats keystore, and create a pkcs keystore"
    #sudo openssl pkcs12 -export -in $CA_CERT -inkey $CA_KEY -out $KEYSTORE \
    #sudo openssl pkcs12 -export -noiter -nomaciter -in $CA_CERT -inkey $CA_KEY -out $KEYSTORE \
    #    -name "candlepin-ca" -CAfile $CA_CERT -caname root -chain 
    #sudo openssl pkcs12 -export -in $SERVER_CERT -inkey $SERVER_KEY -out $KEYSTORE \
    #    -CAfile $CA_CERT -name "tomcat" -certfile $CA_CERT  -password pass:password -chain -caname root
    #sudo keytool -import -trustcacerts -alias "candlepin-ca" -file CAcert.crt -keystore $JAVA_HOME/lib/security/cacerts 


    echo "Create a keystore for tomcat"
    sudo keytool -genkey -keystore $KEYSTORE \
        -dname "CN=$HOSTNAME , OU=Candlepin Server, O=candlepinproject.org" \
        -keypass $KEY_PASS \
        -storepass $KEYSTORE_PASS \
        -keyalg RSA \
        -alias "tomcat" -storetype $STORETYPE

    if [ -n "$VERBOSE" ] ; then
        echo
        echo "CA CERT $CA_CERT"
        sudo keytool -printcert -v -file $CA_CERT

        echo
        echo "apache SERVER CERT $SERVER_CERT"
        sudo keytool -printcert -v -file $SERVER_CERT
    fi

    echo
    echo "import $CA_CERT ca cert into tomcat keystore"
    sudo keytool -importcert -v -v -v -keystore $KEYSTORE \
        -storepass $KEYSTORE_PASS -file $CA_CERT  -alias $CANDLEPIN_CA_ALIAS \
        -keypass $KEY_PASS -storetype $STORETYPE -trustcacerts \
        -noprompt

    if [ -n "$VERBOSE" ] ; then
        echo
        echo "keystore "
        sudo keytool -list -v -keystore $KEYSTORE -storepass $KEYSTORE_PASS \
            -storetype $STORETYPE
    fi
    #echo "convert server cert pkcs12 to pkcs7 for import to keystore"
    # import again as an intmt cert?
    # convert server-cert to pkc7 so we can import to candlepin keystore?
    #   sudo openssl crl2pkcs7  -nocrl -certfile $SERVER_CERT \
    #     -out $SERVER_CERT_P7 -certfile $CA_CERT_P7

    echo
    echo "Create a tomcat server cert signing request based on keystore"
    sudo keytool -certreq -v -alias "tomcat" -keystore $KEYSTORE -storepass $KEYSTORE_PASS -file $TOMCAT_SERVER_CERT_CSR

    echo
    echo "Sign the tomcat server cert with the CA cert/key $CA_CERT/$CA_KEY"
    sudo openssl x509 -req -in $TOMCAT_SERVER_CERT_CSR -CA $CA_CERT -CAkey $CA_KEY -CAcreateserial -out $TOMCAT_SERVER_CERT -days 365

    echo
    echo "Import the signed tomcat server cert $TOMCAT_SERVER_CERT into keystore $KEYSTORE"
    #    sudo keytool -importcert -trustcacerts -v -v -v -keystore $KEYSTORE \
    #        -storepass $KEYSTORE_PASS  -file $TOMCAT_SERVER_CERT  -alias "tomcat" \
    #        -keypass $KEY_PASS -storetype $STORETYPE

    # $SUDO openssl pkcs12 -export -in $CA_CERT -inkey $CA_KEY -out $KEYSTORE -name tomcat
    #  -CAfile $CA_CERT -caname roo
    #     sudo keytool -export -alias tomcat -keystore $KEYSTORE -file  $SERVER_CERT_EXPORT
    # think we need keystore for this
    #    echo
    #    echo "Adding the server cert to tomcats keystore"
    sudo openssl pkcs12 -export -in $SERVER_CERT -inkey $SERVER_KEY_FULL -out $KEYSTORE \
        -name tomcat -CAfile $CA_CERT -caname "$CANDLEPIN_CA_ALIAS" -password "pass:$KEYSTORE_PASS"

    if [ -n "$VERBOSE" ] ; then
        echo
        echo "tomcat keystore "
        sudo keytool -list -v -keystore $KEYSTORE -storepass $KEYSTORE_PASS \
            -storetype $STORETYPE
    fi

    #echo "Creating a server cert $SERVER_CERT"
    #sudo openssl x509 -req -nodes -days 365 -newkey rsa:1024  \
    #    -keyout $SERVER_CERT -out $SERVER_CERT -subj "/CN=$HOSTNAME/O=candlepin server/OU=my candlepin server"
    
    sudo cp $CA_REDHAT_CERT $CA_UPSTREAM_CERT
    sudo chmod a+r $KEYSTORE
fi
