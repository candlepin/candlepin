// vim: set expandtab sts=4 sw=4 ai:
import groovy.text.GStringTemplateEngine
import org.yaml.snakeyaml.Yaml

description = "Candlepin Server"

apply plugin: "war"
apply plugin: Gettext

// Copy the resources to the main classes directory so that the
// persistence context is in the the same classpath entry for
// Hibernate annotation based discovery.
sourceSets.main.output.resourcesDir = new File(buildDir, "classes/java/main")

project.getTasks().getByName("gettext").dependsOn(":candlepin-common:gettext")
gettext {
    keys_project_dir = "${project.rootDir}/common"
}

// substitute the version & release in the version.properties used by the status resource at runtime
processResources {
    from("src/main/resources") {
        include "version.properties"
        expand([version: project.getVersion(), release: project.findProperty("release")])
    }
}

ext {
    logdriver_class = "net.rkbloom.logdriver.LogDriver"
    use_logdriver = "true".equals(project.findProperty("logdriver"))

    cpdb_username = "candlepin"
    cpdb_password = ""
    db_name = "candlepin"

    if (project.findProperty("hidden_resources")) {
        hidden_resources = project.findProperty("hidden_resources")
    }

    if (project.findProperty("hidden_capabilities")) {
        hidden_capabilities = project.findProperty("hidden_capabilities")
    }

    if (!project.findProperty("db_host") ||
        (project.findProperty("db_host") && "".equals(project.findProperty("db_host")))) {
        db_host = "localhost"
    }

    if (project.findProperty("app_db_name") && !"".equals(project.findProperty("app_db_name"))) {
        db_name = project.findProperty("app_db_name")
    }

    // If MYSQL set up the mysql stuff else set up postgres (default)
    if (project.findProperty("database_server") == "mysql") {
        jdbc_driver_class = "com.mysql.jdbc.Driver"
        jdbc_dialect = "org.hibernate.dialect.MySQL5InnoDBDialect"
        jdbc_quartz_driver_class = "org.quartz.impl.jdbcjobstore.StdJDBCDelegate"
        jdbc_url = "jdbc:mysql://${db_host}/${db_name}"
    } else {
        jdbc_driver_class = "org.postgresql.Driver"
        jdbc_dialect = "org.hibernate.dialect.PostgreSQL92Dialect"
        jdbc_quartz_driver_class = "org.quartz.impl.jdbcjobstore.PostgreSQLDelegate"
        jdbc_url = "jdbc:postgresql://${db_host}/${db_name}"
    }

    amqp_enabled = "true".equals(project.findProperty("qpid"))
    external_broker = "true".equals(project.findProperty("external_broker"))
    hostedtest = "true".equals(project.findProperty("hostedtest"))
    async_scheduler_enabled = !project.findProperty("async_scheduler_enabled") ||
        "true".equals(project.findProperty("async_scheduler_enabled"))
}

war {
    if (!hostedtest) {
        rootSpec.exclude("**/hostedtest/**")
    }
    manifest {
        attributes(
            "Implementation-Title": "The Candlepin Project",
            "Copyright": "Red Hat, Inc. 2009-" + new Date().format("y")
        )
    }
    // Copy the license file into place in the final manifest
    from(projectDir) {
        include "LICENSE"
        into("META-INF")
    }
}

task rspec(type: Rspec)

// A task to generate the the candlepin config file for use in etc or other locations.
task generateConfig() {
    dependsOn ":candlepin:processResources"
    def template = file("$projectDir/conf/candlepin.conf.template")
    def targetFile = file("$buildDir/candlepin.conf")
    doLast {
        def defaults = [candlepin: project.ext.properties]
        def binding = [candlepin: defaults['candlepin']]

        try {
            def custom = new Yaml().load(new File("$projectDir/custom.yaml").newInputStream())
            // Overwrite the defaults with the values from custom.yaml
            // We have to use the key 'candlepin' instead of 'candlepin.conf' since the dot in the
            // key name would otherwise be interpreted as a dereference in the template.
            if (custom && custom['candlepin.conf']) {
                binding['candlepin'] << custom['candlepin.conf']
            }
        }
        catch (FileNotFoundException e) {
            println "No custom.yaml found.  Using defaults."
        }

        // change contents via cli options
        // change file contents
        def tmp = new GStringTemplateEngine()
            .createTemplate(template)
            .make(binding)
        targetFile.write(tmp.toString(), "UTF-8")
    }
}
assemble.dependsOn(generateConfig)

// task to generate candlepin-api jar that Hosted adapters build against
// invoked as `./gradlew apiJar`
task apiJar(type: Jar) {
    archiveBaseName = 'candlepin-api'
    from sourceSets.main.output
    includes = [
        'auth',
        'config',
        'jackson',
        'model',
        'pki',
        'resteasy',
        'service',
        'util'
    ].collect { "/org/candlepin/${it}/" }
    duplicatesStrategy = 'exclude'
}

dependencies {
    annotationProcessor libraries.hibernate_validator_ap

    implementation project(":candlepin-common")

    implementation libraries.antlr
    implementation libraries.commons
    implementation libraries.collections
    implementation libraries.gettext
    implementation libraries.guice
    implementation libraries.jackson
    implementation libraries.javax
    implementation libraries.liquibase
    implementation libraries.logging_deps
    implementation libraries.oauth
    implementation libraries.resteasy
    implementation libraries.sun_jaxb
    implementation libraries.swagger
    implementation libraries.validator
    implementation libraries.javax_validation

    // Hibernate
    implementation "org.hibernate:hibernate-core:5.4.9.Final"
    implementation "org.hibernate:hibernate-c3p0:5.4.9.Final"
    implementation "org.hibernate.common:hibernate-commons-annotations:5.0.4.Final"
    implementation "net.bytebuddy:byte-buddy:1.9.4"
    implementation "org.javassist:javassist:3.23.1-GA"
    implementation "com.fasterxml:classmate:1.3.4"
    implementation "com.mchange:c3p0:0.9.5.4"
    implementation "com.mchange:mchange-commons-java:0.2.11"
    implementation "org.dom4j:dom4j:2.1.1"
    implementation "org.jboss:jandex:2.0.5.Final"
    implementation "org.jboss.logging:jboss-logging:3.3.2.Final"
    implementation "javax.activation:javax.activation-api:1.2.0"

    // Ehcache
    implementation "org.hibernate:hibernate-jcache:5.4.6.Final"
    implementation "org.ehcache:ehcache:3.8.0"
    implementation "javax.cache:cache-api:1.0.0"

    compileOnly "org.mozilla:jss:4.4.6"
    testImplementation "org.mozilla:jss:4.4.6"
    implementation "ldapjdk:ldapjdk:4.19"
    implementation "org.quartz-scheduler:quartz:2.2.2"

    // These for ActiveMQ Artemis
    implementation "org.apache.activemq:artemis-server:${versions.artemis}"
    implementation "org.apache.activemq:artemis-core-client:${versions.artemis}"
    implementation "org.apache.activemq:artemis-commons:${versions.artemis}"
    implementation "org.apache.activemq:artemis-selector:${versions.artemis}"
    implementation "org.apache.activemq:artemis-stomp-protocol:${versions.artemis}"
    implementation "org.apache.activemq:artemis-journal:${versions.artemis}"
    implementation "io.netty:netty-all:4.1.42.Final"
    implementation "commons-beanutils:commons-beanutils:1.9.3"
    implementation "org.jgroups:jgroups:3.6.13.Final"
    implementation "org.apache.geronimo.specs:geronimo-json_1.0_spec:1.0-alpha-1"
    implementation "org.apache.johnzon:johnzon-core:0.9.5"

    // AMQP drivers for talking to QPID
    implementation "org.apache.qpid:qpid-common:0.32"
    implementation "org.apache.qpid:qpid-client:0.32"
    implementation "org.apache.mina:mina-core:2.1.3"
    implementation "org.apache.mina:mina-filter-ssl:1.1.7"
    implementation "geronimo-spec:geronimo-spec-jms:1.1-rc4"

    // Javascript engine
    implementation "org.mozilla:rhino:1.7R3"

    // Keycloak
    compile group: 'org.keycloak', name: 'keycloak-servlet-filter-adapter', version: '7.0.0'
    compile group: 'org.keycloak', name: 'keycloak-adapter-core', version: '7.0.0'
    compile group: 'org.keycloak', name: 'keycloak-common', version: '7.0.0'
    compile group: 'org.keycloak', name: 'keycloak-core', version: '7.0.0'
    compile group: 'org.keycloak', name: 'keycloak-adapter-spi', version: '7.0.0'
    compile group: 'org.keycloak', name: 'keycloak-servlet-adapter-spi', version: '7.0.0'
    compile 'org.apache.httpcomponents:httpcore:4.4.7'
    compile 'org.bouncycastle:bcpkix-jdk15on:1.60'
    compile 'org.bouncycastle:bcprov-jdk15on:1.60'
    compile group: 'org.keycloak', name: 'keycloak-jaxrs-oauth-client', version: '7.0.0'
    compile group: 'org.keycloak', name: 'keycloak-authz-client', version: '7.0.0'

    // Listed twice due to design decision by the Gradle team: https://discuss.gradle.org/t/compileonly-dependencies-are-not-available-in-tests/15366/3
    compileOnly libraries.javax_servlet
    testCompile libraries.javax_servlet

    if (use_logdriver) {
        implementation "org.slf4j:log4j-over-slf4j:1.7.5"
        implementation "logdriver:logdriver:1.0"
    }

    // DB Drivers
    runtimeOnly "org.postgresql:postgresql:42.2.2"
    runtimeOnly "mysql:mysql-connector-java:5.1.26"
    runtimeOnly "org.mariadb.jdbc:mariadb-java-client:2.3.0"

    testImplementation libraries.core_testing
    testImplementation libraries.liquibase_slf4j
    testImplementation libraries.jmock

    // Only include bouncycastle for testing purposes (compare against jss)
    testImplementation "org.bouncycastle:bcpkix-jdk15on:1.60"
    testImplementation "org.bouncycastle:bcprov-jdk15on:1.60"

    // Testing DB Drivers
    testRuntime "org.hsqldb:hsqldb:2.3.2"
}

task pom {
    doLast {
        // Exclude all transitive dependencies
        configurations.all*.exclude module: "*"
        conf2ScopeMappings.addMapping(MavenPlugin.COMPILE_PRIORITY + 1, configurations.compileOnly, 'provided')
        conf2ScopeMappings.addMapping(MavenPlugin.COMPILE_PRIORITY + 1, configurations.runtimeOnly, 'runtime')
        conf2ScopeMappings.addMapping(MavenPlugin.COMPILE_PRIORITY + 1, configurations.implementation, 'compile')

        pom {
            project {
                name "Candlepin"
                description "The Candlepin Entitlement Engine"
                parent {
                    groupId "org.candlepin"
                    artifactId "candlepin-parent"
                    version "2.0"
                    relativePath ".."
                }
                packaging "war"
                properties {
                    release "1"
                }
                build([:]) {
                    plugins {
                        plugin {
                            artifactId "maven-surefire-plugin"
                        }
                        plugin {
                            artifactId "maven-assembly-plugin"
                        }
                        plugin {
                            artifactId "maven-compiler-plugin"
                        }
                        plugin {
                            groupId "org.owasp"
                            artifactId "dependency-check-maven"
                        }
                    }
                }
            }
        }
        .withXml {
            // We need to add this dependency so that the Maven assembly plugin will
            // include the source of the common project in the final assembly.
            // TODO Replace version, group, etc.. with variables
            def dependency = asNode().getAt("dependencies")[0].appendNode("dependency")
            dependency.appendNode("groupId", project.group)
            dependency.appendNode("artifactId", "candlepin-common")
            dependency.appendNode("version", project.version)
            dependency.appendNode("type", "tar.gz")
            dependency.appendNode("classifier", "complete")
            dependency.appendNode("scope", "provided")
        }.writeTo("pom.xml")
    }
}
