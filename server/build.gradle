// vim: set expandtab sts=4 sw=4 ai:
import groovy.text.GStringTemplateEngine
import org.yaml.snakeyaml.Yaml

description = "Candlepin Server"

apply plugin: "war"
apply plugin: Gettext

// Copy the resources to the main classes directory so that the
// persistence context is in the the same classpath entry for
// Hibernate annotation based discovery.
sourceSets.main.output.resourcesDir = new File(buildDir, "classes/java/main")

project.getTasks().getByName("gettext").dependsOn(":candlepin-common:gettext")
gettext {
    keys_project_dir = "${project.rootDir}/common"
}

// substitute the version & release in the version.properties used by the status resource at runtime
processResources {
    from("src/main/resources") {
        include "version.properties"
        expand([version: project.getVersion(), release: project.findProperty("release")])
    }
}

ext {
    logdriver_class = "net.rkbloom.logdriver.LogDriver"
    use_logdriver = "true".equals(project.findProperty("logdriver"))

    cpdb_username = "candlepin"
    cpdb_password = ""
    db_name = "candlepin"

    if (project.findProperty("hidden_resources")) {
        hidden_resources = project.findProperty("hidden_resources")
    }

    if (project.findProperty("hidden_capabilities")) {
        hidden_capabilities = project.findProperty("hidden_capabilities")
    }

    if (!project.findProperty("db_host") ||
        (project.findProperty("db_host") && "".equals(project.findProperty("db_host")))) {
        db_host = "localhost"
    }

    if (project.findProperty("app_db_name") && !"".equals(project.findProperty("app_db_name"))) {
        db_name = project.findProperty("app_db_name")
    }

    // If MYSQL set up the mysql stuff else set up postgres (default)
    if (project.findProperty("database_server") == "mysql") {
        jdbc_driver_class = "com.mysql.jdbc.Driver"
        jdbc_dialect = "org.hibernate.dialect.MySQL5InnoDBDialect"
        jdbc_quartz_driver_class = "org.quartz.impl.jdbcjobstore.StdJDBCDelegate"
        jdbc_url = "jdbc:mysql://${db_host}/${db_name}"
    } else {
        jdbc_driver_class = "org.postgresql.Driver"
        jdbc_dialect = "org.hibernate.dialect.PostgreSQL92Dialect"
        jdbc_quartz_driver_class = "org.quartz.impl.jdbcjobstore.PostgreSQLDelegate"
        jdbc_url = "jdbc:postgresql://${db_host}/${db_name}"
    }

    amqp_enabled = "true".equals(project.findProperty("qpid"))
    external_broker = "true".equals(project.findProperty("external_broker"))
    hostedtest = "true".equals(project.findProperty("hostedtest"))
    async_scheduler_enabled = !project.findProperty("async_scheduler_enabled") ||
        "true".equals(project.findProperty("async_scheduler_enabled"))
}

war {
    if (!hostedtest) {
        rootSpec.exclude("**/hostedtest/**")
    }
    manifest {
        attributes(
            "Implementation-Title": "The Candlepin Project",
            "Copyright": "Red Hat, Inc. 2009-" + new Date().format("y")
        )
    }
    // Copy the license file into place in the final manifest
    from(projectDir) {
        include "LICENSE"
        into("META-INF")
    }
}

task rspec(type: Rspec)

// A task to generate the the candlepin config file for use in etc or other locations.
task generateConfig() {
    dependsOn ":candlepin:processResources"
    def template = file("$projectDir/conf/candlepin.conf.template")
    def targetFile = file("$buildDir/candlepin.conf")
    doLast {
        def defaults = [candlepin: project.ext.properties]
        def binding = [candlepin: defaults['candlepin']]

        try {
            def custom = new Yaml().load(new File("$projectDir/custom.yaml").newInputStream())
            // Overwrite the defaults with the values from custom.yaml
            // We have to use the key 'candlepin' instead of 'candlepin.conf' since the dot in the
            // key name would otherwise be interpreted as a dereference in the template.
            if (custom && custom['candlepin.conf']) {
                binding['candlepin'] << custom['candlepin.conf']
            }
        }
        catch (FileNotFoundException e) {
            println "No custom.yaml found.  Using defaults."
        }

        // change contents via cli options
        // change file contents
        def tmp = new GStringTemplateEngine()
            .createTemplate(template)
            .make(binding)
        targetFile.write(tmp.toString(), "UTF-8")
    }
}
assemble.dependsOn(generateConfig)

// task to generate candlepin-api jar that Hosted adapters build against
// invoked as `./gradlew apiJar`
task apiJar(type: Jar) {
    archiveBaseName = 'candlepin-api'
    from sourceSets.main.output
    includes = [
        'auth',
        'config',
        'jackson',
        'model',
        'pki',
        'resteasy',
        'service',
        'util'
    ].collect { "/org/candlepin/${it}/" }
    duplicatesStrategy = 'exclude'
}

dependencies {
    annotationProcessor libraries.hibernate_validator_ap

    implementation project(":candlepin-common")
    implementation project(":api")

    implementation libraries.commons
    implementation libraries.collections
    implementation libraries.gettext
    implementation libraries.guice
    implementation libraries.jackson
    implementation libraries.javax
    implementation libraries.liquibase
    implementation libraries.logging_deps
    implementation libraries.oauth
    implementation libraries.resteasy
    implementation libraries.sun_jaxb
    implementation libraries.swagger
    implementation libraries.validator
    implementation libraries.javax_validation
    implementation libraries.hibernate
    implementation libraries.ehcache
    compileOnly "org.mozilla:jss"
    testImplementation "org.mozilla:jss"
    implementation "ldapjdk:ldapjdk"
    implementation "org.quartz-scheduler:quartz"
    implementation libraries.artemis
    // AMQP drivers for talking to QPID
    implementation libraries.amqp
    // Javascript engine
    implementation "org.mozilla:rhino"
    compile libraries.keycloak
    // Listed twice due to design decision by the Gradle team: https://discuss.gradle.org/t/compileonly-dependencies-are-not-available-in-tests/15366/3
    compileOnly libraries.javax_servlet
    testCompile libraries.javax_servlet

    if (use_logdriver) {
        implementation "org.slf4j:log4j-over-slf4j"
        implementation "logdriver:logdriver"
    }

    // DB Drivers
    runtimeOnly "org.postgresql:postgresql"
    runtimeOnly "mysql:mysql-connector-java"
    runtimeOnly "org.mariadb.jdbc:mariadb-java-client"

    testImplementation libraries.core_testing
    testImplementation libraries.liquibase_slf4j
    testImplementation libraries.jmock

    // Testing DB Drivers
    testRuntime "org.hsqldb:hsqldb"
    testRuntimeOnly "org.glassfish:javax.el:3.0.0"
}

task pom {
    doLast {
        conf2ScopeMappings.addMapping(MavenPlugin.COMPILE_PRIORITY + 1, configurations.compileOnly, 'provided')
        conf2ScopeMappings.addMapping(MavenPlugin.COMPILE_PRIORITY + 1, configurations.runtimeOnly, 'runtime')
        conf2ScopeMappings.addMapping(MavenPlugin.COMPILE_PRIORITY + 1, configurations.implementation, 'compile')

        pom {
            project {
                name "Candlepin"
                description "The Candlepin Entitlement Engine"
                parent {
                    groupId "org.candlepin"
                    artifactId "candlepin-parent"
                    version "2.0"
                    relativePath ".."
                }
                packaging "war"
                properties {
                    release "1"
                }
                build([:]) {
                    plugins {
                        plugin {
                            artifactId "maven-surefire-plugin"
                        }
                        plugin {
                            artifactId "maven-assembly-plugin"
                        }
                        plugin {
                            artifactId "maven-compiler-plugin"
                        }
                        plugin {
                            groupId "org.owasp"
                            artifactId "dependency-check-maven"
                        }
                    }
                }
            }
        }
        .withXml {
            // We need to add this dependency so that the Maven assembly plugin will
            // include the source of the common project in the final assembly.
            // TODO Replace version, group, etc.. with variables
            dependencyManagement.pomConfigurer.configurePom(asNode())
            def dependency = asNode().getAt("dependencies")[0].appendNode("dependency")
            dependency.appendNode("groupId", project.group)
            dependency.appendNode("artifactId", "candlepin-common")
            dependency.appendNode("version", project.version)
            dependency.appendNode("type", "tar.gz")
            dependency.appendNode("classifier", "complete")
            dependency.appendNode("scope", "provided")
        }.writeTo("pom.xml")
    }
}
