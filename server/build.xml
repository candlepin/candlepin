<?xml version="1.0"?>
<project name="candlepin" default="why">
  <property environment="env" />
  <property name="cp-home" location="." />
  <property name="script.dir" location="${cp-home}/bin" />
  <property name="src.main.dir" location="${cp-home}/src/main/java" />
  <property name="res.main.dir" location="${cp-home}/src/main/resources" />
  <property name="webapp.main.dir" location="${cp-home}/src/main/webapp" />
  <property name="src.test.dir" location="${cp-home}/src/test/java" />
  <property name="res.test.dir" location="${cp-home}/src/test/resources" />
  <property name="webapp.test.dir" location="${cp-home}/src/test/webapp" />
  <property name="target.dir" location="${cp-home}/target" />
  <property name="pkgname" value="org.candlepin" />

  <!-- Location of libraries when doing a candlepin-deps build. -->
  <property name="lib.dir" location="${libdir}" />

  <!-- Destination for Candlepin jar dependencies in a regular build. -->
  <property name="dist.lib.dir" location="${distlibdir}" />

  <!-- Source location for Candlepin software collection jar dependencies in a regular build. -->
  <property name="scl.lib.dir" location="${scllibdir}" />

  <!-- A newline delimited list of all the JAR dependencies -->
  <!-- Use /dev/null if not set -->
  <condition property="deps.file" value="/dev/null">
      <not><isset property="deps.file"/></not>
  </condition>

  <!-- List of jars we expect to install from /usr/share/java in a regular build.
       The input should be a newline delimited list of artifact names or coordinates
       that build-jar-repository can understand. -->
  <loadfile property="jar.deps" srcFile="${deps.file}">
      <filterchain>
          <stripjavacomments/>
          <prefixlines prefix=" "/>
          <striplinebreaks/>
          <trim/>
      </filterchain>
  </loadfile>

  <macrodef name="grepfromspec">
    <attribute name="text" />
    <attribute name="prop" />
    <sequential>
      <loadfile property="@{prop}" srcFile="candlepin.spec">
          <filterchain>
              <linecontainsregexp>
                  <regexp pattern="@{text}"/>
              </linecontainsregexp>
              <replaceregex pattern="@{text}" replace=""/>
              <replaceregex pattern="\%\{\?dist\}" replace=""/>
              <striplinebreaks/>
              <trim/>
          </filterchain>
      </loadfile>
    </sequential>
  </macrodef>

  <target name="why">
    <echo message="This is for building in an rpm environment," />
    <echo message="don't use otherwise. Please use buildr instead." />
  </target>

  <target name="setvr">
    <grepfromspec text="Version:" prop="version" />
    <grepfromspec text="Release:" prop="release" />
    <property name="candlepin.war"
              value="${target.dir}/candlepin-${version}.war" />
    <property name="api.jar"
              value="${target.dir}/candlepin-api-${version}.jar" />
    <property name="candlepin-certgen.jar"
              value="${target.dir}/candlepin-certgen-${version}.jar" />
  </target>

  <target name="da_popo">
    <mkdir dir="${target.dir}/generated-source" />
    <apply executable="msgfmt" failonerror="true" relative="true">
      <arg value="--java2"/>
      <arg value="--resource"/>
      <arg value="org.candlepin.i18n.Messages"/>
      <arg value="-d"/>
      <arg value="${target.dir}/generated-source"/>
      <arg value="--locale"/>
      <!--
       The end result of the chained mapper will be placed here.  This
       is a bit of an abuse because we're using targetfile as a parameter
       instead of a destination file, but that's the only way I knew how to
       do it.
      -->
      <targetfile/>
      <!-- Take the name of the po file, run basename on it and then strip
        off the ".po" suffix" -->
      <chainedmapper>
          <flattenmapper/>
          <globmapper from="*.po" to="*"/>
      </chainedmapper>
      <fileset dir="${cp-home}" includes="po/**/*.po"/>
    </apply>
  </target>

  <target name="init" depends="setvr, da_popo" />

  <target name="compile_withcpdeps" depends="init" if="usecpdeps">
    <mkdir dir="${target.dir}/classes" />
    <mkdir dir="${target.dir}/resources" />
    <javac destdir="${target.dir}/classes"
           optimize="off"
           debug="on"
           source="1.6"
           target="1.6"
           encoding="utf-8"
           fork="yes">
      <src>
        <path location="${src.main.dir}" />
        <path location="${res.main.dir}" />
      </src>
      <classpath>
        <fileset dir="${lib.dir}">
          <include name="**/*.jar" />
        </fileset>
      </classpath>
    </javac>
    <copy todir="${target.dir}/resources">
      <fileset dir="${res.main.dir}" />
      <filterset begintoken="$${" endtoken="}">
         <filter token="version" value="${version}" />
         <filter token="release" value="${release}" />
      </filterset>
    </copy>
  </target>

  <target name="compile" depends="init" unless="usecpdeps">
    <mkdir dir="${target.dir}/classes" />
    <mkdir dir="${target.dir}/resources" />
    <javac destdir="${target.dir}/classes"
           optimize="off"
           debug="on"
           source="1.6"
           target="1.6"
           encoding="utf-8"
           fork="yes">
      <src>
        <path location="${src.main.dir}" />
        <path location="${res.main.dir}" />
      </src>
      <exclude name="org/candlepin/util/apicrawl/**"/>
      <classpath>
        <fileset dir="${dist.lib.dir}">
          <include name="**/*.jar" />
        </fileset>
      </classpath>
    </javac>
    <copy todir="${target.dir}/resources">
      <fileset dir="${res.main.dir}" />
      <filterset begintoken="$${" endtoken="}">
         <filter token="version" value="${version}" />
         <filter token="release" value="${release}" />
      </filterset>
    </copy>
  </target>

  <target name="usecpdeps">
    <property name="usecpdeps" value="true" />
  </target>

  <target name="initjars" unless="usecpdeps">
      <echo>Initializing jars</echo>
      <echo>dist.lib.dir: ${dist.lib.dir}</echo>
      <echo>scl.lib.dir: ${scl.lib.dir}</echo>

    <!-- Handle the jars in /usr/share/java -->
    <jpackage-deps jars="${jar.deps}" dir="${dist.lib.dir}" />

    <!-- Handle the jars in the software collection under /opt/rh/candlepin-scl/ -->
    <candlepin-scl-deps jar="quartz" dir="${dist.lib.dir}" />
    <candlepin-scl-deps jar="js" dir="${dist.lib.dir}" />

  </target>

  <target name="package" depends="initjars,compile,compile_withcpdeps">
    <jar destfile="${api.jar}">
      <fileset dir="${target.dir}/classes">
        <exclude name="**/pinsetter/**" />
        <include name="**/candlepin/auth/**"/>
        <include name="**/candlepin/config/**"/>
        <include name="**/candlepin/service/**"/>
        <include name="**/candlepin/model/**"/>
        <include name="**/candlepin/pki/**"/>
        <include name="**/candlepin/exceptions/**"/>
        <include name="**/candlepin/util/**"/>
        <include name="**/candlepin/resteasy/**"/>
        <include name="**/candlepin/jackson/**"/>
        <include name="**/candlepin/paging/**"/>
      </fileset>
      <manifest>
        <attribute name="Implementation-Vendor" value="" />
        <attribute name="Manifest-Version" value="1.0" />
        <attribute name="Build-By" value="${env.USER}" />
        <attribute name="Created-By" value="Buildr" />
        <attribute name="Implementation-Version" value="" />
        <attribute name="Implementation-Title" value="The Proxy project" />
        <attribute name="Build-Jdk" value="" />
      </manifest>
    </jar>
    <jar destfile="${candlepin-certgen.jar}">
      <fileset dir="${target.dir}/classes">
        <include name="**/config/**"/>
        <include name="**/util/**"/>
        <include name="**/service/**"/>
        <include name="**/model/**"/>
        <include name="**/pki/**"/>
        <include name="**/jackson/**"/>
        <include name="**/exceptions/**"/>
        <!-- only used to retrieve class names in Config-->
        <include name="**/pinsetter/**"/>
      </fileset>
      <manifest>
        <attribute name="Implementation-Vendor" value="" />
        <attribute name="Manifest-Version" value="1.0" />
        <attribute name="Build-By" value="${env.USER}" />
        <attribute name="Created-By" value="Buildr" />
        <attribute name="Implementation-Version" value="" />
        <attribute name="Implementation-Title" value="The Proxy project" />
        <attribute name="Build-Jdk" value="" />
      </manifest>
    </jar>
    <war destfile="${candlepin.war}"
         webxml="${webapp.main.dir}/WEB-INF/web.xml">
      <fileset dir="${webapp.main.dir}">
        <exclude name="${webapp.main.dir}/WEB-INF/web.xml" />
      </fileset>
      <classes dir="${target.dir}/classes" />
      <classes dir="${target.dir}/resources">
        <include name="**/*.properties" />
        <include name="**/*.js" />
        <include name="**/*.xml" />
      </classes>
      <classes dir="${target.dir}/generated-source" />
      <lib dir="${dist.lib.dir}">
        <exclude name="**/servlet.jar" />
        <!-- can be removed once candlepin-deps is dead -->
        <exclude name="**/emma*.jar" />
        <exclude name="**/hamcrest*.jar" />
        <exclude name="**/jmock*.jar" />
        <exclude name="**/junit*.jar" />
        <exclude name="**/mockito*.jar" />
        <exclude name="**/schemaSpy*.jar" />
      </lib>
    </war>
  </target>

  <target name="clean">
    <delete dir="${target.dir}" quiet="true" />
  </target>

  <!--
    creates symlinks for jpackage jars
    requires: jpackage-utils
    other: requires rpms of the jars specified to be installed
  -->
  <macrodef name="jpackage-deps">
    <attribute name="jars" />
    <attribute name="dir" /> <!-- destination -->

    <sequential>
      <echo message="Symlinking @{jars}" />
      <exec executable="build-jar-repository" failonerror="true" >
        <arg value="-p" />
        <arg value="-s @{dir}" />
        <arg line="@{jars}" />
      </exec>
    </sequential>
  </macrodef>

  <!--
    creates symlinks for candlepin software collection jars
  -->
  <macrodef name="candlepin-scl-deps">
    <attribute name="jar" />
    <attribute name="dir" /> <!-- destination -->

    <sequential>
      <echo message="Symlinking SCL @{jar}" />
      <symlink link="@{dir}/@{jar}.jar" resource="${scl.lib.dir}/@{jar}.jar" />
    </sequential>
  </macrodef>


</project>
