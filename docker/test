#!/bin/bash

TEST_CMD="/usr/bin/cp-test -t -u -r"
DIR="$(git rev-parse --show-toplevel)/docker/"

usage() {
  cat << USAGE

USAGE: test [OPTIONS]

OPTIONS:
  -c CMD    sets the command to be run by the container
              default: $TEST_CMD
  -m        use mysql
  -n NAME   Sets the project name for the docker-compose run
  -p        use postgres
  -l        skip docker pull and use local images
  -d        run containers detached and expose https, http & ssh ports
              this will also not automatically shut down & remove the
              containers on the script's exit

USAGE
}

while getopts ":c:mn:pld" opt; do
  case $opt in
    c) TEST_CMD="$OPTARG";;
    m) COMPOSE_ARGS="-f $DIR/docker-compose-mysql.yml";
       chcon -Rt svirt_sandbox_file_t $DIR/mysql.cnf;
       sudo chown 999:999 $DIR/mysql.cnf;;
    n) PROJ_NAME="-p $OPTARG";;
    p) COMPOSE_ARGS="-f $DIR/docker-compose-postgres.yml";;
    l) USE_CACHE="1";;
    d) DETACHED="1";;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      usage
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      usage
      exit 1
      ;;
  esac
done

# PROJ_NAME should be set in a jenkins environment. It allows multiple
#  instances of the compose to run without clobbering each other.
cd $DIR
docker-compose $PROJ_NAME stop
docker-compose $PROJ_NAME rm -f

if [ "$USE_CACHE" != "1" ]; then
  docker-compose $COMPOSE_ARGS pull
fi

if [ "$DETACHED" == "1" ]; then
    # Run detached, and don't remove the containers
    docker-compose $PROJ_NAME $COMPOSE_ARGS run -d --service-ports candlepin $TEST_CMD
    RETVAL=$?
else
    docker-compose $PROJ_NAME $COMPOSE_ARGS run --rm candlepin $TEST_CMD
    RETVAL=$?
    docker-compose $PROJ_NAME down
fi

echo "return value: $RETVAL"
cd -
exit $RETVAL
