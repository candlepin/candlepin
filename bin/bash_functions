#! /bin/bash

RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
RESET_COLOR=$(tput sgr0)

err_msg() {
    echo "${RED}${1}${RESET_COLOR}" >&2
}

success_msg() {
    echo "${GREEN}${1}${RESET_COLOR}"
}

warn_msg() {
    echo "${YELLOW}${1}${RESET_COLOR}"
}

info_msg() {
    echo "${BLUE}${1}${RESET_COLOR}"
}

project_directory() {
    if [ -n "$1" ]; then
        qbuildr "project_root:$1"
    else
        qbuilder project_root
    fi
}

checkout_directory() {
    git rev-parse --show-toplevel
}

qbuildr() {
    # The implementation of "$*" has always been a problem and realistically
    # should have been replaced with the behavior of "$@". In almost every case
    # where coders use "$*", they mean "$@". "$*" Can cause bugs and even
    # security holes in your software.
    # http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_03_02.html
    buildr -s "$@"
}

evalrc() {
    if [ "$1" -ne "0" ]; then
        err_msg "$2"
        exit $1
    fi
}

# Note that this function takes certificate strings as parameters
# and not the file names of certificate files!  Also note that when
# dealing with a certificate string, you should always quote the
# variable to preserve the newlines.
fingerprint() {
    local cert="$1"
    if [ -n "$cert" ]; then
        echo "$cert" | openssl x509 -noout -fingerprint | cut -d= -f2
    else
        echo ""
    fi
}

fp_file() {
    echo "$(fingerprint "$(cert_from_file "$@")")"
}

fp_nss() {
    echo "$(fingerprint "$(cert_from_nss "$@")")"
}

fp_jks() {
    echo "$(fingerprint "$(cert_from_jks "$@")")"
}

fp_pkcs12() {
    echo "$(fingerprint "$(cert_from_pkcs12 "$@")")"
}

cert_from_file() {
    if [ -e "$1" ]; then
        # Some cert files have other human readable junk in them.  I'm looking at you, Katello.
        openssl x509 -in "$1"
    else
        echo ""
    fi
}

cert_from_nss() {
    local db="$1"
    local cert_alias="$2"
    if [ -d "$db" ]; then
        sudo certutil -L -d "$db" -n "$cert_alias" -a 2> /dev/null || echo ""
    else
        echo ""
    fi
}

cert_from_jks() {
    local jks="$1"
    local cert_alias="$2"
    if [ -e "$jks" ]; then
        sudo keytool -exportcert -alias "$cert_alias" -keystore "$jks" -rfc -storepass "$JAVA_PASS"
    else
        echo ""
    fi
}

cert_from_pkcs12() {
    local pkcs12="$1"
    local name="$2"
    local password="${3:-password}"
    if [ -e "$pkcs12" ]; then
      # PKCS12 prints a bunch of junk at the top of the output that we don't want.
      sudo openssl pkcs12 -in "$pkcs12" -name "$name" -passin pass:$password -nokeys -nomacver | \
        awk -v RS='\0' '{print substr($0, match($0, /-----BEGIN.*/))}'
    else
        echo ""
    fi
}

recreate_postgresql() {
    local db_name="$1"
    local db_user="${2:-$db_name}"
    # Check if candlepin db exists and drop it if so:
    if [[ `psql -U $db_user -tAc "SELECT 1 FROM pg_database WHERE datname='$db_name'"` == "1" ]]; then
        info_msg "Database '$db_name' exists.  Dropping it."
        dropdb -w -U "$db_user" "$db_name"
    fi
    createdb -w -U "$db_user" "$db_name"
    evalrc $? "createdb failed"
}

init_postgresql_jdbc() {
    local db_name="$1"
    declare -A -g JDBC
    JDBC['driver']="org.postgresql.Driver"
    JDBC['jar']="/usr/share/java/postgresql-jdbc.jar"
    JDBC['url']="jdbc:postgresql:$db_name"
}

recreate_mysql() {
    local db_name="$1"
    local db_user="${2:-$db_name}"
    local password="$DBPASSWORD"
    [ -z "$password" ] && password=''
    mysqladmin --user="$db_user" --password="$password" --force drop "$db_name"
    mysqladmin --user="$db_user" --password="$password" create "$db_name"
    evalrc $? "mysqladmin create failed"
}

init_mysql_jdbc() {
    local db_name="$1"
    declare -A -g JDBC
    JDBC['driver']="com.mysql.jdbc.Driver"
    JDBC['jar']="/usr/share/java/mysql-connector-java.jar"
    JDBC['url']="jdbc:mysql:///$db_name"
}

recreate_oracle () {
    local db_name="$1"
    local db_user="${2:-$db_name}"
    local password="${DBPASSWORD:-$db_name}"
    sqlplus -s 'sys/password@//localhost/XE as sysdba'<<EOF
drop user $db_name cascade;
create user $db_user identified by $password default tablespace users;
grant dba to $db_user;
quit
EOF
    evalrc $? "Creating Candlepin user failed"
}

init_oracle_jdbc() {
    local db_name="$1"
    declare -A -g JDBC
    JDBC['driver']="oracle.jdbc.OracleDriver"
    JDBC['jar']="/usr/lib/oracle/11.2/client64/lib/ojdbc6.jar"
    JDBC['url']="jdbc:oracle:thin:@//localhost:1521/XE "
}
