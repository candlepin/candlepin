#!/usr/bin/env ruby
$VERBOSE = nil

require 'pp'
require './candlepin_api'
require 'optparse'

# Wrapper class for the base Candlepin lib that
# will introspect an instance for currently defined
# methods, allowing command line invocation of those
# methods.
#
# Also adds a little functionality to the base
# Candlepin lib that are specific to the cli.
class CandlepinCLI < Candlepin

  def self.commands
    Candlepin.public_instance_methods(false).sort.each do |method|
      yield method if callable_name? method
    end
  end

  def is_method?(method_name)
    respond_to? method_name.intern and CandlepinCLI.callable_name? method_name
  end

  private

  def self.callable_name?(method_name)
    method_name[-1] != ?=
  end

end

def print_commands
end


# Set up the options
options = {}

optparse = OptionParser.new do|opts|
    opts.banner = "Usage: cpc [options] command"

    options[:user] = 'admin'
    opts.on( '--username [USER]', 'Username to connect as.  Defaults to admin.' ) do |opt|
        options[:user] = opt
    end

    options[:password] = 'admin'
    opts.on( '--password [PASSWORD]', 'Password to authenticate the user as. Defaults to admin.' ) do |opt|
        options[:password] = opt
    end

    options[:server] = 'localhost'
    opts.on( '--server [SERVERNAME]', String, 'Server name FQDN. Defults to localhost' ) do |opt|
        options[:server] = opt
    end

    options[:port] = 8443
    opts.on( '--port [PORTNUM]', 'Port Number. Defults to 8443' ) do |opt|
        options[:port] = opt.to_i
    end

    options[:context] = 'candlepin'
    opts.on( '--context [CONTEXT]', 'Context to use. Defults to candlepin' ) do |opt|
        options[:context] = opt
    end

    options[:uuid] = nil
    opts.on( '--uuid [UUID]', 'UUID to use. Defults to nil' ) do |opt|
        options[:uuid] = opt
    end

    options[:ssl] = true
    opts.on( '--nossl', 'Do not use SSL.' ) do |opt|
        options[:ssl] = false
    end

    options[:verbose] = false
    opts.on( '--verbose', 'Enable Verbose Logging' ) do |opt|
        options[:verbose] = true
    end

    options[:trusted_user] = false
    opts.on( '--trusted', 'User should be trusted. Defaults to false' ) do
        options[:trusted_user] = true
    end

    opts.on( '--help', 'Display help and exit' ) do
        puts opts
        exit
    end

    opts.on( '-c', '--commands', 'List out the commands' ) do
        puts "=========== Commands ============"
        puts

        CandlepinCLI.commands do |command|
          puts "\t" + command.to_s
        end
        exit
    end

end

optparse.parse!

if ARGV.empty?
    puts optparse
    exit
else

  cli = CandlepinCLI.new(options[:user], options[:password], nil,nil,
                        options[:server], options[:port], nil, options[:uuid],
                        options[:trused_user], options[:context],
                        options[:ssl])

  cli.verbose= options[:verbose]

  method_name = ARGV[0]

  if cli.is_method? method_name
    args = ARGV[1..-1].collect do |arg|
      begin
        eval(arg)
      rescue Exception
        arg
      end
    end
    val = cli.send(method_name, *args)

    pp val
  else
    puts "#{method_name} is not a valid command!"
  end
end

