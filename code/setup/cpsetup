#!/usr/bin/python
#
# Copyright (c) 2010 Red Hat, Inc.
#
# This software is licensed to you under the GNU General Public License,
# version 2 (GPLv2). There is NO WARRANTY for this software, express or
# implied, including the implied warranties of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2
# along with this software; if not, see
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.
#
# Red Hat trademarks are not licensed under GPLv2. No permission is
# granted to use or replicate Red Hat trademarks that are incorporated
# in this software or its documentation.
#

"""
Script to set up a Candlepin server.

This script should be idempotent, as puppet will re-run this to keep
the server functional.
"""

import sys
import commands
import os.path, os
import socket
import re
import time
import httplib
from optparse import OptionParser

CANDLEPIN_CONF = '/etc/candlepin/candlepin.conf'

def run_command(command):
    (status, output) = commands.getstatusoutput(command)
    if status > 0:
        sys.stderr.write("\n########## ERROR ############\n")
        sys.stderr.write("Error running command: %s\n" % command)
        sys.stderr.write("Status code: %s\n" % status)
        sys.stderr.write("Command output: %s\n" % output)
        raise Exception("Error running command")
    return output

# run with 'sudo' if not running as root
def run_command_with_sudo(command):
    if os.geteuid()==0:
        run_command(command)
    else:
        run_command('sudo %s' % command)

class TomcatSetup(object):
    def __init__(self, conf_dir, keystorepwd):
        self.conf_dir = conf_dir
        self.comment_pattern = '<!--\s*?\n*?<Connector port="8443".*?-->'
        self.existing_pattern = '<Connector port="8443".*?/>'
        self.https_conn = """
    <Connector port="8443" protocol="HTTP/1.1" SSLEnabled="true"
               maxThreads="150" scheme="https" secure="true"
               clientAuth="want" SSLProtocol="TLS"
               keystoreFile="conf/keystore"
               truststoreFile="conf/keystore"
               keystorePass="%s"
               keystoreType="PKCS12"
               ciphers="SSL_RSA_WITH_3DES_EDE_CBC_SHA,
                    TLS_RSA_WITH_AES_256_CBC_SHA,
                    TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA,
                    TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA,
                    TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA,
                    TLS_ECDH_RSA_WITH_AES_128_CBC_SHA,
                    TLS_ECDH_RSA_WITH_AES_256_CBC_SHA,
                    TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA,
                    TLS_ECDH_anon_WITH_AES_128_CBC_SHA,
                    TLS_ECDH_anon_WITH_AES_256_CBC_SHA"
               truststorePass="%s" />""" % (keystorepwd, keystorepwd)


    def _backup_config(self, conf_dir):
        run_command('cp %s/server.xml %s/server.xml.original' % (conf_dir, conf_dir))

    def _replace_current(self, original):
        regex = re.compile(self.existing_pattern, re.DOTALL)
        return regex.sub(self.https_conn, original)

    def _replace_commented(self, original):
        regex = re.compile(self.comment_pattern, re.DOTALL)
        return regex.sub(self.https_conn, original)

    def update_config(self):
        self._backup_config(self.conf_dir)
        original = open(os.path.join(self.conf_dir, 'server.xml'), 'r').read()

        if re.search(self.comment_pattern, original, re.DOTALL):
            updated = self._replace_commented(original)
        else:
            updated = self._replace_current(original)

        config = open(os.path.join(self.conf_dir, 'server.xml'), 'w')
        config.write(updated)
        file.close

    def fix_perms(self):
        run_command("chmod g+x /var/log/tomcat6")
        run_command("chmod g+x /etc/tomcat6/")
        run_command("chown tomcat:tomcat -R /var/lib/tomcat6")
        run_command("chown tomcat:tomcat -R /var/lib/tomcat6")
        run_command("chown tomcat:tomcat -R /var/cache/tomcat6")

    def stop(self):
        run_command("/sbin/service tomcat6 stop")

    def restart(self):
        run_command("/sbin/service tomcat6 restart")

    def wait_for_startup(self):
        print("Waiting for tomcat to restart...")
        conn = httplib.HTTPConnection('localhost:8080')
        for x in range(1,5):
            time.sleep(5)
            try:
                conn.request('GET', "/candlepin/")
                if conn.getresponse().status == 200:
                    break
            except:
                print("Waiting for tomcat to restart...")

class CertSetup(object):
    def __init__(self):
        self.cert_home = '/etc/candlepin/certs'
        self.ca_key_passwd = self.cert_home + '/candlepin-ca-password.txt'
        self.ca_key = self.cert_home + '/candlepin-ca.key'
        self.ca_pub_key = self.cert_home + '/candlepin-ca-pub.key'
        self.ca_cert = self.cert_home + '/candlepin-ca.crt'
        self.keystore = self.cert_home + '/keystore'

    def generate(self):
        if not os.path.exists(self.cert_home):
            run_command_with_sudo('mkdir -p %s' % self.cert_home)

        if os.path.exists(self.ca_key) and os.path.exists(self.ca_cert):
            print("Cerficiates already exist, skipping...")
            return

        print("Creating CA private key password")
        run_command_with_sudo('su -c "echo $RANDOM > %s"' % self.ca_key_passwd)
        print("Creating CA private key")
        run_command_with_sudo('openssl genrsa -out %s -passout "file:%s" 1024' % (self.ca_key, self.ca_key_passwd))
        print("Creating CA public key")
        run_command_with_sudo('openssl rsa -pubout -in %s -out %s' % (self.ca_key, self.ca_pub_key))
        print("Creating CA certificate")
        run_command_with_sudo('openssl req -new -x509 -days 365 -key %s -out %s -subj "/CN=%s/C=US/L=Raleigh/"' % (self.ca_key, self.ca_cert, socket.gethostname()))
        run_command_with_sudo('openssl pkcs12 -export -in %s -inkey %s -out %s -name tomcat -CAfile %s -caname root -chain -password pass:password' % (self.ca_cert, self.ca_key, self.keystore, self.ca_cert))
        run_command_with_sudo('chmod a+r %s' % self.keystore)


class OracleConf(object):
    def get_dialect(self):
        return "org.hibernate.dialect.Oracle10gDialect"

    def get_driver(self):
        return "oracle.jdbc.OracleDriver"

    def get_jdbc_url(self, db):
        return "jdbc:oracle:thin:@//%s" % db


class PostgresqlConf(object):
    def get_dialect(self):
        return "org.hibernate.dialect.PostgreSQLDialect"

    def get_driver(self):
        return "org.postgresql.Driver"

    def get_jdbc_url(self, db):
        return "jdbc:postgresql:%s" % db


def write_candlepin_conf(options):
    """
    Write configuration to candlepin.conf.
    """

    # If the file exists and it's size is not 0 (it will be empty after
    # fresh rpm install), write out a default with database configuration:
    if os.path.exists(CANDLEPIN_CONF) and os.stat(CANDLEPIN_CONF).st_size > 0:
        print("candlepin.conf already exists, skipping...")
        return

    print("Writing configuration file")

    if options.oracle:
        dbconf = OracleConf()
    else:
        dbconf = PostgresqlConf()

    f = open(CANDLEPIN_CONF, 'w')
    f.write('jpa.config.hibernate.dialect=%s\n' % dbconf.get_dialect())
    f.write('jpa.config.hibernate.connection.driver_class=%s\n' % dbconf.get_driver())
    f.write('jpa.config.hibernate.connection.url=%s\n' % dbconf.get_jdbc_url(options.db))
    f.write('jpa.config.hibernate.connection.username=%s\n' % options.dbuser)
    f.write('jpa.config.hibernate.connection.password=%s\n' % options.password)
    if options.webapp_prefix:
        f.write('\ncandlepin.export.webapp.prefix=%s\n' % options.webapp_prefix)
    f.close()


def main(argv):

    parser = OptionParser()
    parser.add_option("-s", "--skipdbcfg",
                  action="store_true", dest="skipdbcfg", default=False,
                  help="don't configure the /etc/candlepin/candlepin.conf file")
    parser.add_option("-u", "--user",
                  dest="dbuser", default="candlepin",
                  help="the database user to use")
    parser.add_option("-d", "--database",
                  dest="db", default="candlepin",
                  help="the database to use")
    parser.add_option("-w", "--webapp-prefix",
                  dest="webapp_prefix",
                  help="the web application prefix to use for export origin [host:port/prefix]")
    parser.add_option("-k", "--keystorepwd",
                  dest="keystorepwd", default="password",
                  help="the keystore password to use for the tomcat configuration")
    parser.add_option("-p", "--password",
                  dest="password", default="candlepin",
                  help="Database password. Defaults to 'candlepin'")
    parser.add_option("--oracle",
                  action="store_true", dest="oracle", default=False,
                  help="set up Candlepin to run against Oracle")
    parser.add_option("--oracle-user",
                  dest="oracle_user", default="sys",
                  help="Oracle DBA user. Defaults to 'sys'")
    parser.add_option("--oracle-password",
                  dest="oracle_password",
                  help="Oracle DBA password")

    (options, args) = parser.parse_args()

    if options.oracle and not options.oracle_password:
        print("ERROR: Please provide the DBA password.")
        sys.exit(1)

    # Stop tomcat before we wipe the DB otherwise you get errors from pg
    tsetup = TomcatSetup('/etc/tomcat6', options.keystorepwd)
    tsetup.fix_perms()
    tsetup.stop()

    # Call the cpdb script to create the candlepin database. This will fail
    # if the database already exists, protecting us from accidentally wiping
    # it out if cpsetup is re-run.
    script_dir = os.path.dirname(__file__)
    cpdb_script = os.path.join(script_dir, "cpdb")
    command = "%s --create -u %s --database %s --password %s" % (cpdb_script,
        options.dbuser, options.db, options.password)
    if options.oracle:
        command = " ".join([command, "--oracle --oracle-user %s --oracle-password %s" %
            (options.oracle_user, options.oracle_password)])

    run_command(command)

    if not options.skipdbcfg:
        write_candlepin_conf(options)
    else:
        print "** Skipping configuration file setup"

    certsetup = CertSetup()
    certsetup.generate()

    tsetup = TomcatSetup('/etc/tomcat6', options.keystorepwd)
    tsetup.update_config()
    tsetup.restart()
    tsetup.wait_for_startup()

    run_command("wget -qO- http://localhost:8080/candlepin/admin/init")

    print("Candlepin has been configured.")

if __name__ == "__main__":
    main(sys.argv[1:])
