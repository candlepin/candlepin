#!/bin/bash
#
# Launch point for the container to run Candlepin tests.
#
# Starts supervisor to manage services, then tries to cd to the correct
# location, either /candlepin-dev if you mounted this as a volume when
# running your container, otherwise the included /candlepin clone which
# we will make sure to update.
#
# See usage below.

# Exit on any error:
set -eE

# have to '|| true' here, for some reason /etc/profile.d/rvm.sh
# will break set -e even though it actually works
source /etc/profile || true

if [ -f /root/setup-db.sh ]; then
  source /root/setup-db.sh
fi

export HOME=/root

if [ -f /usr/bin/supervisord ]; then
    export SUPERVISOR=1
fi
export AUTOCONF=1
export FORCECERT=1
export UNITTEST=0

trapex() {
    target="$1"
    shift

    for sig in "$@"; do
        trap "$target $sig" "$sig"
        signals="$signals $sig"
    done
}

# Be sure to run cleanup on any error, SIGINT, or SIGTERM
trapex cleanup SIGINT SIGTERM ERR EXIT
CLEANUP_RUN=0
CLEAN_CP=0

cleanup() {
    if [ "$CLEANUP_RUN" == "0" ]; then
        CLEANUP_RUN=1

        # Remove our traps so we don't keep trying to call this
        trap - $signals
        trap "" ERR EXIT

        # Errors in the script should still launch the shell, as they're likely CP config errors, not
        # actual errors with the script
        if [ "$1" == "" ] || [ "$1" == "ERR" ] || [ "$1" == "EXIT" ]; then
            if [ "$LAUNCHSHELL" == "1" ]; then
                echo "Launching shell..."
                /bin/bash -i -l
            fi
        else
            # exit, propagating any signal we received
            kill -$1 $$
        fi
    fi
}

# This function converts candlepin version to a int value with (Zero) padding
# which helps in comparing versions.
# Examples -
# 2.5.6  -> 2005006000
# 3.2.0  -> 3002000000
# 2.9.6  -> 2009006000
get_simplified_version() {
	echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }';
}

usage() {
    cat <<HELP
usage: cp-test [options]

OPTIONS:
  -d                deploy a live candlepin
  -t                populate Candlepin database with test data (implies -d)
  -R                populate Candlepin environment with test repositories (implies -t)
  -H                run in "hosted" mode (implies -d)
  -s                run a bash shell when done
  -c <ref>          git reference to checkout
  -j <version>      use a specific Java version instead of the auto-detected default
  -v                enable verbose/debug output
  -k                run cloud registration spec test suite (only for "hosted" mode)
  -a <arguments>    extra arguments to pass to the Candlepin deploy script (implies -d)
HELP
}

JAVA_VERSION=17
while getopts ":dtRqHskicb:a:vj:" opt; do
    case $opt in
        d  ) DEPLOY="1";;
        t  )
            DEPLOY="1"
            TESTDATA="1"
            ;;
        R  )
            DEPLOY="1"
            TESTDATA="1"
            REPODATA="1"
            ;;
        H  )
            HOSTED="1"
            DEPLOY="1"
            ;;
        a  ) EX_ARGS="${EX_ARGS} ${OPTARG}"
            DEPLOY="1"
            ;;
        s  ) LAUNCHSHELL="1";;
        c  ) CHECKOUT="${OPTARG}";;
        v  ) VERBOSE="1";;
        j  ) JAVA_VERSION="${OPTARG}";;
        k  ) CLOUD_AUTH_SPEC="1";;
        ?  ) usage; exit;;
    esac
done

# Pass volume with container run mounted at this location if you'd like to
# run against your source checkout.
# i.e. -v /home/dgoodwin/src/candlepin:/candlepin-dev
if [ -d "/candlepin-dev" ]; then
    echo "Using mounted volume /candlepin-dev"

    CP_HOME="/candlepin-dev"
    cd $CP_HOME
else
    # Otherwise we use the clone in the image and try to update it.
    echo "Using /candlepin"

    CP_HOME="/candlepin"
    cd $CP_HOME

    # In case $CP_HOME contains local changes its better to use 'clean'
    # to remove any untracked files before proceeding
    git fetch
    git reset --hard
    git clean -df
    git merge FETCH_HEAD

    if [ -n "$CHECKOUT" ]; then
        echo "Checking out: $CHECKOUT"
        git checkout "$CHECKOUT"
    fi
fi

if [ -n "${JAVA_VERSION}" ]; then
    echo "Overriding tomcat.conf to use Java ${JAVA_VERSION}"
    update-alternatives --set java /usr/lib/jvm/java-$JAVA_VERSION-openjdk-$JAVA_VERSION*/bin/java
    sed -i "s/JAVA_HOME=.*/JAVA_HOME=\"\/usr\/lib\/jvm\/jre-${JAVA_VERSION}\"/" /etc/tomcat/tomcat.conf
fi

# Auto-detect JAVA_VERSION if necessary and set JAVA_HOME and update executable links
# Note that alternatives doesn't update the JDK binaries properly, and doesn't order
# versions predictably, so we'll just explicitly make the links ourself.
if [ -z "$JAVA_VERSION" ]; then
    JAVA_VERSION=$(java -version 2>&1 | head -1 | sed -r 's/^(java|openjdk) version \"([0-9]+\.[0-9]+\.[0-9]+).*\"/\2/')
fi

export JAVA_VERSION
export JAVA_HOME=/usr/lib/jvm/java-$JAVA_VERSION

if [ -d "$JAVA_HOME" ]; then
    ln -sf -t /usr/bin $JAVA_HOME/bin/*
    echo "Using Java version: $JAVA_VERSION ($JAVA_HOME)"
else
    echo "Java home not found for version $JAVA_VERSION: $JAVA_HOME"
    exit 1
fi

# WARNING: control+c while this is running will take out supervisor as well.
if [ -f /usr/bin/supervisord ]; then
    /usr/bin/supervisord -c /etc/supervisord.conf
fi

mkdir -p /var/log/candlepin

if [ "$DEPLOY" == "1" ]; then
    echo "Deploying candlepin..."
    CLEAN_CP=1

    DEPLOY_FLAGS="-g"

    if [ "$HOSTED" == "1" ] && (./bin/deployment/deploy '-?' | grep -q -- '-H'); then
        DEPLOY_FLAGS="$DEPLOY_FLAGS -H -a"
    else
        DEPLOY_FLAGS="$DEPLOY_FLAGS -a"
        echo "This deployment is not for HOSTED."
    fi

    if [ "$TESTDATA" == "1" ]; then
        DEPLOY_FLAGS="$DEPLOY_FLAGS -t"
    fi

    if [ "$REPODATA" == "1" ]; then
        DEPLOY_FLAGS="$DEPLOY_FLAGS -r"
    fi

    if [ "$VERBOSE" == "1" ]; then
        DEPLOY_FLAGS="$DEPLOY_FLAGS -v"
    fi

    DEPLOY_FLAGS="${DEPLOY_FLAGS}${EX_ARGS}"

    # To run the cloud auth spec test suite.
    # We generate custom.yaml to enable the
    # cloud auth property.
    # This is valid only for hosted mode.

    if [ "$CLOUD_AUTH_SPEC" == "1" ] && [ "$HOSTED" == "1" ]; then
        python ./bin/scripts/generate_custom_yaml.py .
    fi

    # set up the database from setup-db.sh
    # only runs if function is defined
    type -t setup_database &>/dev/null && setup_database

    ./bin/deployment/deploy $DEPLOY_FLAGS

fi

cleanup
