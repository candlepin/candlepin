<?xml version="1.0"?>
<project name="gutterball" default="why">
  <target name="why">
    <echo message="This file is for building in an RPM environment." />
    <echo message="Don't use otherwise.  Use buildr instead." />
  </target>

  <property name="project.home" location="." />
  <property name="src.dir" location="${project.home}/src/main/java" />
  <property name="resource.dir" location="${project.home}/src/main/resources"/>
  <property name="webapp.dir" location="${project.home}/src/main/webapp" />
  <property name="target.dir" location="${project.home}/target" />
  <property name="pkgname" value="org.candlepin.gutterball" />

  <property name="scl.regexp" value="^scl:"/>

  <condition property="lib.dir" value="lib">
    <not><isset property="lib.dir"/></not>
  </condition>

  <target name="prereqs" unless="usecpdeps">
    <fail message="The dist.name property must be defined." unless="dist.name"/>

    <property name="deps.file" value="deps/${dist.name}.txt"/>

    <fail message="${deps.file} is missing.">
      <condition>
        <not>
          <available file="${deps.file}"/>
        </not>
      </condition>
    </fail>
  </target>

  <target name="setvr">
    <grepfromspec text="Version:" prop="version" />
    <grepfromspec text="Release:" prop="release" />
    <property name="war.file" value="${target.dir}/gutterball-${version}.war"/>
  </target>

  <target name="da_popo">
    <mkdir dir="${target.dir}/generated-source" />
    <apply executable="msgfmt" failonerror="true" relative="true">
      <arg value="--java2"/>
      <arg value="--resource"/>
      <arg value="org.candlepin.i18n.Messages"/>
      <arg value="-d"/>
      <arg value="${target.dir}/generated-source"/>
      <arg value="--locale"/>
      <!--
       The end result of the chained mapper will be placed here.  This
       is a bit of an abuse because we're using targetfile as a parameter
       instead of a destination file, but that's the only way I knew how to
       do it.
      -->
      <targetfile/>
      <!-- Take the name of the po file, run basename on it and then strip
        off the ".po" suffix" -->
      <chainedmapper>
        <flattenmapper/>
        <globmapper from="*.po" to="*"/>
      </chainedmapper>
      <fileset dir="${project.home}" includes="po/**/*.po"/>
    </apply>
  </target>

  <target name="compile" depends="prereqs, setvr, da_popo, initjars">
    <mkdir dir="${target.dir}/classes" />
    <mkdir dir="${target.dir}/resources" />
    <javac destdir="${target.dir}/classes"
           optimize="off"
           debug="on"
           source="1.6"
           target="1.6"
           encoding="utf-8"
           fork="yes">
      <src>
        <path location="${src.dir}" />
        <path location="${resource.dir}" />
      </src>
      <classpath>
        <fileset dir="${lib.dir}">
          <include name="**/*.jar" />
        </fileset>
      </classpath>
    </javac>
    <copy todir="${target.dir}/resources">
      <fileset dir="${resource.dir}" />
      <filterset begintoken="$${" endtoken="}">
        <filter token="version" value="${version}" />
        <filter token="release" value="${release}" />
      </filterset>
    </copy>
  </target>

  <target name="usecpdeps">
    <property name="usecpdeps" value="true" />
  </target>

  <target name="initjars" depends="prereqs" unless="usecpdeps">
    <mkdir dir="${lib.dir}" />
    <loadlist src="${deps.file}" prop="jar.deps" negate="true">
      <regexp pattern="${scl.regexp}"/>
    </loadlist>
    <jpackage-deps jars="${jar.deps}" dir="${lib.dir}" />
  </target>

  <target name="package" depends="compile">
    <war destfile="${war.file}" webxml="${webapp.dir}/WEB-INF/web.xml">
      <classes dir="${target.dir}/classes" />
      <classes dir="${target.dir}/generated-source" />

      <fileset dir="${webapp.dir}"/>
      <fileset dir="${target.dir}/resources"/>

      <lib dir="${lib.dir}">
        <exclude name="**/servlet.jar" />
      </lib>
    </war>
  </target>

  <target name="clean">
    <delete dir="${target.dir}" quiet="true" />
    <delete dir="${lib.dir}" quiet="true" />
  </target>

  <!--
    Load a list of items from a file.  Provide the file, the property
    to read into, and optionally a regular expresion to filter on.
  -->
  <macrodef name="loadlist">
    <attribute name="src"/>
    <attribute name="prop"/>
    <attribute name="negate" default="false"/>
    <element name="regexp-element" implicit="true"/>
    <sequential>
      <loadfile property="@{prop}" srcFile="@{src}">
        <filterchain>
          <stripjavacomments/>
          <linecontainsregexp negate="@{negate}">
            <regexp-element/>
          </linecontainsregexp>
          <prefixlines prefix=" "/>
          <striplinebreaks/>
          <trim/>
        </filterchain>
      </loadfile>
    </sequential>
  </macrodef>

  <macrodef name="grepfromspec">
    <attribute name="text" />
    <attribute name="prop" />
    <sequential>
      <loadfile property="@{prop}" srcFile="gutterball.spec">
        <filterchain>
          <linecontainsregexp>
            <regexp pattern="@{text}"/>
          </linecontainsregexp>
          <replaceregex pattern="@{text}" replace=""/>
          <replaceregex pattern="\%\{\?dist\}" replace=""/>
          <striplinebreaks/>
          <trim/>
        </filterchain>
      </loadfile>
    </sequential>
  </macrodef>

  <!--
    Creates symlinks for jpackage jars.
    Optionally contains any elements that can be passed to exec.
  -->
  <macrodef name="jpackage-deps">
    <attribute name="jars"/>
    <attribute name="dir"/>
    <element name="custom-environment" optional="true" implicit="true"/>

    <sequential>
      <echo message="Symlinking @{jars}" />
      <exec executable="build-jar-repository" failonerror="true" >
        <custom-environment/>
        <arg value="-p" />
        <arg value="-s @{dir}" />
        <arg line="@{jars}" />
      </exec>
    </sequential>
  </macrodef>

  <macrodef name="scl-deps">
    <attribute name="jars" />
    <attribute name="scl" />
    <attribute name="dir" />

    <sequential>
      <condition property="location.override" value="JAVAAPP_LIBDIR">
        <equals arg1="${dist.name}" arg2="el6"/>
      </condition>

      <condition property="location.override" value="JAVA_LIBDIR">
        <equals arg1="${dist.name}" arg2="el7"/> 
      </condition>

      <!-- At this point all the SCL JARs are in the format scl:blah:mydep
           so we need to remove the "scl" and the SCL name -->
      <loadresource property="cleaned.jars">
        <string value="@{jars}"/>
        <filterchain>
           <tokenfilter>
             <stringtokenizer/> <!-- Break the JAR names into a list of tokens. -->
             <replaceregex replace="" pattern="${scl.regexp}@{scl}:"/>
           </tokenfilter>
        </filterchain>
      </loadresource>
      <!-- Terrible hack to enable build-jar-repository to look inside an SCL
       for JARs.  See https://bugzilla.redhat.com/show_bug.cgi?id=1127346 -->
      <property name="tmp.javaconf" value="${target.dir}/@{scl}"/>
      <mkdir dir="${tmp.javaconf}/.java"/>
      <echo message="${location.override}=/opt/rh/@{scl}/root/usr/share/java" file="${tmp.javaconf}/.java/java.conf"/>
      <jpackage-deps jars="${cleaned.jars}" dir="@{dir}">
        <env key="HOME" value="${tmp.javaconf}" />
      </jpackage-deps>
      <delete dir="${tmp.javaconf}"/>
    </sequential>
  </macrodef>
</project>
