#!/bin/sh

function evalrc ()
{
    if [ "$1" -ne "0" ] ; then
        echo "$2"
        exit
    fi
}

function recreate_mysql()
{
    mysqladmin --user="$DBUSER" --password="$DBPASSWORD" --force drop candlepin
    mysqladmin --user="$DBUSER" --password="$DBPASSWORD" create candlepin
    evalrc $? "mysqladmin create failed"
}

function recreate_postgresql ()
{
    # need to setup .pgpass for this to use passwds
    # something like:
    #   *:*:candlepin:candlepin:candlepinpasswd
    #   *:*:postgres:candlepin:candlepinpasswd

    dropdb -w -U "$DBUSER" candlepin
    createdb -w -U "$DBUSER" candlepin
    evalrc $? "createdb failed"
}

function recreate_oracle ()
{
    #sqlplus -s 'sys/password@//localhost/XE as sysdba' @`dirname $0`/recreate-candlepin.sql
    sqlplus -s 'sys/password@//localhost/XE as sysdba'<<EOF
drop user candlepin cascade;
create user candlepin identified by candlepin default tablespace users;
grant dba to candlepin;
quit
EOF
    evalrc $? "Creating Candlepin user failed"
}

function gendb ()
{
if [ "$GENDB" == "1" ]; then
    MESSAGE="generating a new db"
    CHANGELOG="changelog-create.xml"
    if [ "$USE_ORACLE" == "1" ]; then
        recreate_oracle
    elif [ "$USE_MYSQL" == "1" ]; then
        recreate_mysql
    else
        recreate_postgresql
    fi
else
    MESSAGE="updating db"
    CHANGELOG="changelog-update.xml"
fi

if [ "$USE_ORACLE" == "1" ]; then
    DRIVER="oracle.jdbc.OracleDriver"
    JDBC_JAR="/usr/lib/oracle/11.2/client64/lib/ojdbc6.jar"
    JDBC_URL="jdbc:oracle:thin:@//localhost:1521/XE "
    if [ -z "$DBPASSWORD" ] ; then
        DBPASSWORD="candlepin"
    fi
elif [ "$USE_MYSQL" == "1" ]; then
    DRIVER="com.mysql.jdbc.Driver"
    JDBC_JAR="/usr/share/java/mysql-connector-java.jar"
    JDBC_URL="jdbc:mysql:///candlepin"
else
    DRIVER="org.postgresql.Driver"
    JDBC_JAR="/usr/share/java/postgresql-jdbc.jar"
    JDBC_URL="jdbc:postgresql:candlepin"
fi

	echo "============ $MESSAGE =============="
    LQCOMMAND="liquibase --driver=$DRIVER --classpath=src/main/resources/:target/classes/:$JDBC_JAR --changeLogFile=db/changelog/$CHANGELOG --url=$JDBC_URL --username=candlepin"
    if [ -n "$DBPASSWORD" ] ; then
        LQCOMMAND="$LQCOMMAND --password=$DBPASSWORD "
    fi
    LQCOMMAND="$LQCOMMAND update -Dcommunity=True"
    $LQCOMMAND
    evalrc $? "Liquibase command failed"
}

function deploy ()
{
    VERSION="`grep Version: candlepin.spec | cut --delim=' ' -f2`"
    if [ -z $CLEAN ] ; then
        $SUDO rm -rf $DEPLOY
    else
        $SUDO rm -rf $CLEAN
    fi
    $SUDO cp target/candlepin-$VERSION.war $DEPLOY
}

function stopappserver ()
{
    # tc rpm /sbin/service tomcat6 stop
    # tc opt $TC_HOME/bin/catalina.sh stop
    # jboss opt $JBOSS_HOME/bin/shutdown.sh
    $STOP
}

function isrpm ()
{
    echo $1 | grep "var/lib" > /dev/null
    return $?
}


function update_keystore
{
	if [ "$FORCECERT" = "1" ]; then
	    echo "Move the keystore to tomcats location"
	    sudo cp /etc/candlepin/certs/keystore $CONTAINER_CONF_DIR/keystore
	else
	    echo "Using existing keystore"
	fi
}

function upload_products
{
  if [ "$TESTDATA" = "1" ]; then
	  `dirname $0`/import_products.rb  `dirname $0`/test_data.json
  fi
}

function create_var_lib_candlepin
{
    sudo mkdir -p /var/lib/candlepin
    sudo chown tomcat:tomcat /var/lib/candlepin
}

function create_var_log_candlepin
{
    sudo mkdir -p /var/log/candlepin
    sudo chown tomcat:tomcat /var/log/candlepin
}

function create_var_cache_candlepin
{
    sudo mkdir -p /var/cache/candlepin
    sudo chown tomcat:tomcat /var/cache/candlepin
}

function autoconf
{
  buildr -e $1 erb $2

  red='\e[0;31m'
  NC='\e[0m' # No Color
  if [ "$?" -ne "0" ]; then
    echo -e "${red}ERROR: candlepin.conf generation failed!${NC}"
    return 1
  fi

  CANDLEPIN_CONF="/etc/candlepin/candlepin.conf"

  if $(sudo head -n 1 $CANDLEPIN_CONF | grep -q "AUTOGENERATED"); then
    sudo cp target/generated/erb/candlepin.conf $CANDLEPIN_CONF
  else
    echo -e "${red}Your candlepin.conf does not appear to be autogenerated.  Cowardly refusing to overwrite.${NC}"
    return 1
  fi
}

function usage
{
    cat <<HELP
    usage: deploy [options]

    OPTIONS:
        -f  force cert regeneration
        -g  generate database
        -t  import test data
        -o  use Oracle
        -l  use Logdriver
        -m  use MySQL
        -a  auto-deploy a generated candlepin.conf
HELP
}

# Read in user defined variables
if [ -f $HOME/.candlepinrc ] ; then
    source $HOME/.candlepinrc
fi

DBUSER="candlepin"

while getopts ":fgtolma" opt; do
    case $opt in
        f  ) FORCECERT="1" ;;
        g  ) GENDB="1";;
        t  ) TESTDATA="1";;
        o  ) USE_ORACLE="1";;
        l  ) LOGDRIVER="logdriver";;
        m  ) USE_MYSQL="1";;
        a  ) AUTOCONF="1";;
        ?  ) usage; exit;;
    esac
done

shift $(($OPTIND - 1))

if [ "$USE_ORACLE" == "1" -a "$USE_MYSQL" == "1" ]; then
    echo "You can't use Oracle and MySQL at the same time."
    exit 1
fi

if [ "$JBOSS_HOME" != "" ]; then
    # we're using JBOSS AS
    isrpm $JBOSS_HOME

    if [ "$?" -ne 0 ]; then
        START="$JBOSS_HOME/bin/run.sh 2>&1 > console.log &"
        STOP="$JBOSS_HOME/bin/shutdown.sh --shutdown"
        DEPLOY="$JBOSS_HOME/server/default/deploy/"
    else
        SUDO="sudo"
        START="sudo /sbin/service jbossas start"
        STOP="sudo /sbin/service jbossas stop"
        DEPLOY="$JBOSS_HOME/server/default/deploy/"
    fi
    CONTAINER_CONF_DIR="$JBOSS_HOME/conf"
    CLEAN="$JBOSS_HOME/server/default/deploy/candlepin*"
else
    # use tomcat 6, unless it doesnt exist and tomcat does
    TC=tomcat6
    if ( [ -f /usr/sbin/tomcat ] && (! [ -f /usr/sbin/tomcat6 ] ) );
    then
        TC=tomcat
    fi
    if [ -z $TC_HOME ]; then
        TC_HOME=/var/lib/$TC
    fi

    isrpm $TC_HOME

    if [ "$?" -ne 0 ]; then
        START="$TC_HOME/bin/catalina.sh jpda start"
        STOP="$TC_HOME/bin/catalina.sh stop"
        CONTAINER_CONF_DIR="$TC_HOME/conf"
    else
        SUDO="sudo"
        START="sudo /sbin/service $TC start"
        STOP="sudo /sbin/service $TC stop"
        CONTAINER_CONF_DIR="/etc/$TC"
    fi

    DEPLOY="$TC_HOME/webapps/candlepin.war"
    CLEAN="$TC_HOME/webapps/candlepin/"
fi

# stop the appserver
eval $STOP

# generate the postgresql DB

if [ "$LOGDRIVER" == "logdriver" ]; then
    echo "using logdriver"
    LOGDRIVER="logdriver=yes"
else
    echo "using NO logdriver"
    LOGDRIVER=""
fi

if [ "$USE_ORACLE" == "1" ]; then
    echo "building with Oracle JDBC jar"
    ENV_BUILDR="oracle"
elif [ "$USE_MYSQL" == "1" ]; then
    ENV_BUILDR="mysql"
else
    # "development" is the default buildr environment.  It has been aliased to the postgresql environment
    # in profiles.yaml
    ENV_BUILDR="development"
fi

buildr -e $ENV_BUILDR clean package test=no $LOGDRIVER

if [ "$?" -ne "0" ]; then
  echo "ERROR: Compile failed."
  exit 1
fi

gendb

if [ "$FORCECERT" == "1" ]; then
    GEN_CERTS_ARGS="-f"
fi

# generate SSL certs if they are needed
sh -x `dirname $0`/gen-certs $GEN_CERTS_ARGS

# update keystore file and put it into tomcat's conf directory
update_keystore

# update server.xml
sudo python buildconf/scripts/update-server-xml.py $CONTAINER_CONF_DIR

create_var_lib_candlepin
create_var_log_candlepin
create_var_cache_candlepin

if [ "$AUTOCONF" == "1" ]; then
  autoconf $ENV_BUILDR $LOGDRIVER
fi

# deploy the webapp
deploy

eval $START

sleep 10
echo "Initializing Candlepin..."
wget --no-check-certificate -qO- https://localhost:8443/candlepin/admin/init

upload_products
