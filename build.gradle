import groovy.text.GStringTemplateEngine
import org.yaml.snakeyaml.Yaml

plugins {
    id "java"
    id "war"
    id "distribution"
    id "maven-publish"
    id "jacoco"
    alias(libs.plugins.dependency.check)
    alias(libs.plugins.gradle.versions)
    alias(libs.plugins.nebula.lint)
    alias(libs.plugins.sonarqube)

    // The following are plugins are plugins we wrote in the buildSrc folder
    id "org.candlepin.gradle.gettext"
    id "org.candlepin.gradle.msgfmt"
    id "org.candlepin.gradle.SpecVersion"
    id "checkstyle-conventions"
    id "test-logging-conventions"
}

apply from: "dependencies.gradle"

group = "org.candlepin"

ext {
    cpdb_username = "candlepin"
    cpdb_password = ""
    db_name = "candlepin"

    if (project.findProperty("hidden_resources")) {
        hidden_resources = project.findProperty("hidden_resources")
    }

    if (project.findProperty("hidden_capabilities")) {
        hidden_capabilities = project.findProperty("hidden_capabilities")
    }

    if (!project.findProperty("db_host") ||
            (project.findProperty("db_host") && "".equals(project.findProperty("db_host")))) {

        db_host = "localhost"
    }

    if (project.findProperty("app_db_name") && !"".equals(project.findProperty("app_db_name"))) {
        db_name = project.findProperty("app_db_name")
    }

    // If MYSQL set up the mysql stuff else set up postgres (default)
    if (project.findProperty("database_server") == "mysql") {
        jdbc_driver_class = "org.mariadb.jdbc.Driver"
        jdbc_dialect = "org.hibernate.dialect.MySQL5InnoDBDialect"
        jdbc_quartz_driver_class = "org.quartz.impl.jdbcjobstore.StdJDBCDelegate"
        jdbc_url = "jdbc:mariadb://${db_host}/${db_name}"
    } else {
        jdbc_driver_class = "org.postgresql.Driver"
        jdbc_dialect = "org.hibernate.dialect.PostgreSQL92Dialect"
        jdbc_quartz_driver_class = "org.quartz.impl.jdbcjobstore.PostgreSQLDelegate"
        jdbc_url = "jdbc:postgresql://${db_host}/${db_name}"
    }

    external_broker = "true".equals(project.findProperty("external_broker"))
    async_scheduler_enabled = !project.findProperty("async_scheduler_enabled") ||
        "true".equals(project.findProperty("async_scheduler_enabled"))
}

dependencies {
    implementation(project(":api"))

    // Commons
    implementation(libs.commons.codec)
    implementation(libs.commons.collections)
    implementation(libs.commons.io)
    implementation(libs.commons.lang)

    // Collections
    implementation(libs.guava)

    // Gettext libraries used for internationalization & translation
    implementation(libs.gettext)

    // Guice Libraries
    implementation(libs.guice.servlet)
    implementation(libs.guice.persist)

    // Jackson
    implementation(libs.jackson.hibernate)
    implementation(libs.jackson.jaxrs)
    implementation(libs.jackson.jdk8)
    implementation(libs.jackson.json.schema)
    implementation(libs.jackson.jsr310)
    implementation(libs.jackson.xml)
    implementation(libs.jackson.yaml)

    // Bean validation API is explicitly added to this version
    // This is a transitive dependency of
    // com.fasterxml.jackson.module:jackson-module-jsonSchema
    implementation(libs.javax.validation)

    // Javax
    implementation(libs.hibernate)
    implementation(libs.javax.annotation)

    // Liquibase
    implementation(libs.liquibase)
    implementation(libs.picocli)

    // Logging
    implementation(libs.logback)
    // Artifacts that bridge other logging frameworks to slf4j. Mime4j uses
    // JCL for example.
    implementation(libs.jcl.over.slf4j)
    implementation(libs.log4j.over.slf4j)
    implementation(libs.logstash)

    // Oauth
    implementation(libs.oauth)

    // Resteasy
    implementation(libs.resteasy.atom)
    implementation(libs.resteasy.guice)
    implementation(libs.resteasy.multipart)
    implementation(libs.resteasy.validator)

    implementation(libs.javax.rs)

    // Sun jaxb
    implementation(libs.jaxb)
    implementation(libs.jaxb.core)

    // Swagger
    implementation(libs.swagger)

    // Validator
    implementation(libs.hibernate.validator)
    implementation(libs.hibernate.validator.processor)

    // Hibernate
    implementation(libs.hibernate.c3p0)
    // Ehcache (for use with hibernate primarily)
    implementation(libs.hibernate.jcache)
    implementation(libs.ehcache)
    implementation(libs.javax.cache)

    // Artemis server & client
    implementation(libs.artemis.server)
    implementation(libs.artemis.stomp)

    // Javascript Engine
    implementation(libs.rhino)

    implementation(libs.quartz)

    // Keycloak
    implementation(libs.keycloak)

    // Hibernate JPA integration
    implementation(libs.hibernate.jpamodelgen)
    annotationProcessor(libs.hibernate.jpamodelgen)

    // Smallrye Config
    implementation(libs.smallrye.config)
    implementation(libs.tomcat.annotations)

    // Use wildcard because this could be called jss4.jar or jss.jar
    // (depending on if we are before Fedora35/RHEL9 or after)
    providedCompile fileTree(dir: '/usr/lib64/jss', include: '*.jar')
    providedCompile(libs.javax.servlet)

    // DB Drivers
    runtimeOnly(libs.postgresql)
    runtimeOnly(libs.mariadb)

    testRuntimeOnly(libs.hsqldb)
    testRuntimeOnly(libs.javax.el)

    // Core testing libraries
    // Junit 5
    testImplementation(libs.junit.api)
    testImplementation(libs.junit.params)
    testRuntimeOnly(libs.junit.engine)

    testImplementation(libs.hamcrest)
    testImplementation(libs.mockito.junit)
    testImplementation(libs.liquibase.slf4j)
    testImplementation(libs.assertj)
}

// Copy the resources to the main classes directory so that the
// persistence context is in the the same classpath entry for
// Hibernate annotation based discovery.
sourceSets.main.output.resourcesDir = new File(buildDir, "classes/java/main")

// Add the openapi generated classes to the main java source sets to compile in the generated interfaces
sourceSets {
    main.java.srcDir "${buildDir}/generated/api/src/gen/java"
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

gradleLint {
    rules = ["dependency-parentheses"]
    // Turn these on selectively.  They are a little too sensitive to leave on all the time,
    // but they provide useful information when run occasionally.
    // rules = ["dependency-parentheses", "unused-exclude-by-dep"]
    // criticalRules = ["unused-dependency"]
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    // options.compilerArgs << "-Xlint:unchecked"
    // options.compilerArgs << "-Xlint:deprecation"
    // options.compilerArgs.addAll(['--release', '8'])
}

repositories {
    mavenCentral()

    maven { url "https://repo.jenkins-ci.org/public/" }
    maven { url "https://repository.jboss.org/nexus/content/groups/public/" }
}

tasks.register("openApiValidate") {
    dependsOn(":api:openApiValidate")
}

tasks.register("openApiGenerate") {
    dependsOn(":api:openApiGenerate")
    dependsOn(":client:openApiGenerate")
}

tasks.register("openApiGenerateJson") {
    dependsOn(":api:openApiGenerateJson")
}

gettext {
    keys_project_dir = "${project.rootDir}/"
}

msgfmt {
    resource "org.candlepin.common.i18n.Messages"
}

test {
    debugOptions {
        host = '*'
    }

    useJUnitPlatform()

    // Sometimes causes out of memory on vagrant
    maxHeapSize = "2g"
    jvmArgs = [
            // We need to load the native jss lib (either libjss4.so or libjss.so) from this directory
            '-Djava.library.path=/usr/lib64/jss',
            '-XX:+HeapDumpOnOutOfMemoryError'
    ]

}

jacocoTestReport {
    dependsOn test

    reports {
        csv.required = false
        html.required = false
        xml.required = true
    }

    doLast {
        println "Generated unit test coverage report at $buildDir/reports/jacoco/test/jacocoTestReport.xml"
    }
}

// User-friendly alias for jacocoTestReport task
tasks.register("coverage") {
    dependsOn jacocoTestReport
}

project.tasks["sonar"].dependsOn "coverage"
sonar {
    properties {
        property "sonar.sourceEncoding", "Utf-8"
        property "sonar.projectKey", "candlepin_candlepin"
        property "sonar.organization", "candlepin"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.BIN
}

clean.doFirst {
    delete "${rootDir}/buildSrc/build"
    // Maven clean up
    delete "${rootDir}/src/main/webapp/docs/candlepin-api-spec.yaml"
    delete "${rootDir}/target"
}

//Update the compileJava & processResourcesTasks depend on the openapi generation so that the generated classes
//can be used during compilation.
compileJava.dependsOn tasks.openApiGenerate
processResources.dependsOn(":api:openApiGenerateJson")
//processResources.dependsOn tasks.specVersion
compileJava.dependsOn(processResources)

// substitute the version & release in the version.properties used by the status resource at runtime
processResources {
    from("src/main/resources") {
        duplicatesStrategy = "include"
        include "version.properties"
        expand([version: project.getVersion(), release: project.findProperty("release")])
    }
}

// A task to generate the the candlepin config file for use in etc or other locations.
tasks.register('generateConfig') {
    dependsOn ":processResources"
    def template = file("$projectDir/config/candlepin/candlepin.conf.template")
    def targetFile = file("$buildDir/candlepin.conf")
    doLast {
        def defaults = [candlepin: project.ext.properties]
        def binding = [candlepin: defaults['candlepin']]

        try {
            def custom = new Yaml().load(new File("$projectDir/custom.yaml").newInputStream())
            // Overwrite the defaults with the values from custom.yaml
            // We have to use the key 'candlepin' instead of 'candlepin.conf' since the dot in the
            // key name would otherwise be interpreted as a dereference in the template.
            if (custom && custom['candlepin.conf']) {
                binding['candlepin'] << custom['candlepin.conf']
            }
        }
        catch (FileNotFoundException e) {
            println "No custom.yaml found.  Using defaults."
        }

        // change contents via cli options
        // change file contents
        def tmp = new GStringTemplateEngine()
                .createTemplate(template)
                .make(binding)
        targetFile.write(tmp.toString(), "UTF-8")
    }
}
assemble.dependsOn(generateConfig)

// task to generate candlepin-api jar that Hosted adapters build against
// invoked as `./gradlew apiJar`
tasks.register('apiJar', Jar) {
    archiveBaseName = 'candlepin-api'
    from sourceSets.main.output
    includes = [
            'auth',
            'config',
            'controller',
            'exceptions',
            'jackson',
            'model',
            'pki',
            'resteasy',
            'service',
            'util'
    ].collect { "/org/candlepin/${it}/" }
    duplicatesStrategy = 'exclude'
}

war {
    // This is a bit wonky and has potential to miss stuff, but we don't really have a much nicer
    // way of doing this, outside the real correct answer of converting them to subprojects like
    // they probably should be.
    if (project.hasProperty('test_extensions')) {
        List<String> testexts = test_extensions.tokenize(',');

        // If we've defined one or more test extensions, selectively exclude subpackages that are
        // not in the list of test extensions
        String testExtRootPath = "${buildDir}/classes/java/main/org/candlepin/testext/";
        File[] packages = new File(testExtRootPath)
            .listFiles((FileFilter) File::isDirectory);

        packages.each { pkg ->
            if (!testexts.contains(pkg.getName())) {
                rootSpec.exclude("**/testext/${pkg.getName()}/**");
            }
            else {
                println("Including test extension: ${pkg.getName()}")
            }
        }
    }
    else {
        // Building with no test extensions; exclude the whole package
        rootSpec.exclude("**/testext/**");
    }

    manifest {
        attributes(
            "Implementation-Title": "The Candlepin Project",
            "Copyright": "Red Hat, Inc. 2009-" + new Date().format("y")
        )
    }

    // Copy the license file into place in the final manifest
    from(projectDir) {
        include "LICENSE"
        into("META-INF")
    }

    from("./api") {
        include "candlepin-api-spec.yaml"
        into("docs")
    }
    from("$buildDir/generated/api/src/main/openapi") {
        include "openapi.yaml"
        into("WEB-INF/classes")
    }
    from("$buildDir/generated/json") {
        include "openapi.json"
        into("WEB-INF/classes")
    }
}

publishing {
    publications {
        // Publish the candlepin war
        warArtifact(MavenPublication) {
            from components.web

            groupId 'org.candlepin'
            artifactId 'candlepin'
        }

        // Publish the candlepin-api jar
        jarArtifact(MavenPublication) {
            artifact tasks.apiJar

            groupId = 'org.candlepin'
            artifactId = 'candlepin-api'
        }
    }
}
