import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

// vim: set expandtab sts=4 sw=4 ai:

buildscript {
    ext.openapi_version = '4.0.1'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'org.yaml', name: 'snakeyaml', version: '1.19'
        classpath "org.openapitools:openapi-generator-gradle-plugin:${openapi_version}"
    }
}

plugins {
    id "io.spring.dependency-management" version "1.0.8.RELEASE"
    id "nebula.lint" version "16.2.3"
    /*
    The Versions plugin is used to provide the dependencyUpdates task which is used
    to look for libraries that have newer versions available.
     */
    id "com.github.ben-manes.versions" version "0.28.0"
    id "org.candlepin.gradle.SpecVersion"
    id "java"
}

ext.versions = [
    jackson   : "2.10.1",
    guice     : "4.1.0",
    checkstyle: "8.29",
    junit5    : "5.4.2"
]

ext.libraries = [
    resteasy: [
        "org.jboss.resteasy:resteasy-jaxb-provider",
        "org.jboss.resteasy:resteasy-guice",
        "org.jboss.resteasy:resteasy-atom-provider",
        "org.jboss.resteasy:resteasy-multipart-provider",
        "javax.ws.rs:javax.ws.rs-api",
        "org.eclipse.microprofile.config:microprofile-config-api",
    ],
    jackson: [
        "com.fasterxml.jackson.core:jackson-annotations",
        "com.fasterxml.jackson.core:jackson-core",
        "com.fasterxml.jackson.core:jackson-databind",
        "com.fasterxml.jackson.jaxrs:jackson-jaxrs-base",
        "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider",
        "com.fasterxml.jackson.module:jackson-module-jsonSchema",
        "com.fasterxml.jackson.module:jackson-module-jaxb-annotations",
        "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5",
        "com.fasterxml.jackson.datatype:jackson-datatype-jdk8",
        "com.fasterxml.jackson.datatype:jackson-datatype-jsr310",
        "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml",
        "com.fasterxml.jackson.dataformat:jackson-dataformat-xml",
    ],
    swagger: [
        "io.swagger:swagger-jaxrs",
        "io.swagger:swagger-core",
        "io.swagger:swagger-models",
        "io.swagger:swagger-annotations",

        "org.reflections:reflections:0.9.10",
        "org.apache.commons:commons-lang3",
    ],
    sun_jaxb: [
        "com.sun.xml.bind:jaxb-impl",
        "com.sun.xml.bind:jaxb-core",
    ],
    core_testing: [
        "org.junit.jupiter:junit-jupiter-api",
        "org.junit.jupiter:junit-jupiter-params",
        "org.junit.jupiter:junit-jupiter-engine",
        "org.junit.vintage:junit-vintage-engine",
        "org.hamcrest:hamcrest-library",
        "org.hamcrest:hamcrest-core",
        "org.mockito:mockito-junit-jupiter",
        "org.mockito:mockito-core",
        "junit:junit",
    ],
    logging_deps: [
        "ch.qos.logback:logback-classic",
        // Artifacts that bridge other logging frameworks to slf4j. Mime4j uses
        // JCL for example.
        "org.slf4j:jcl-over-slf4j",
        "org.slf4j:log4j-over-slf4j",
        "net.logstash.logback:logstash-logback-encoder",
    ],
    javax: [
        "org.hibernate.javax.persistence:hibernate-jpa-2.1-api",
        "javax.transaction:jta",
        "javax.persistence:javax.persistence-api",
        "javax.xml.bind:jaxb-api",
    ],
    commons: [
        "commons-codec:commons-codec",
        "commons-collections:commons-collections",
        "commons-io:commons-io",
        "commons-lang:commons-lang",
    ],
    guice: [
        "com.google.inject.extensions:guice-assistedinject",
        "com.google.inject.extensions:guice-multibindings",
        "com.google.inject.extensions:guice-servlet",
        "com.google.inject.extensions:guice-throwingproviders",
        "com.google.inject.extensions:guice-persist",
        "com.google.inject:guice",
        "aopalliance:aopalliance",
        "javax.inject:javax.inject",
    ],
    liquibase: "org.liquibase:liquibase-core",
    liquibase_slf4j: "com.mattbertolini:liquibase-slf4j",
    oauth: [
        "net.oauth.core:oauth",
        "net.oauth.core:oauth-provider",
    ],
    collections: "com.google.guava:guava:25.1-jre",
    hibernate_validator_ap: "org.hibernate.validator:hibernate-validator-annotation-processor",
    checkstyle: [
        "com.puppycrawl.tools:checkstyle",
        "com.github.sevntu-checkstyle:sevntu-checks"
    ],
    gettext: "com.googlecode.gettext-commons:gettext-commons",
    javax_servlet: "javax.servlet:servlet-api",
    javax_validation: "javax.validation:validation-api",
    jmock: [
        "org.jmock:jmock",
        "org.jmock:jmock-junit4",
    ],
    validator: [
        "org.hibernate.validator:hibernate-validator",
        "org.hibernate.validator:hibernate-validator-annotation-processor",
    ],
    keycloak: "org.keycloak:keycloak-servlet-filter-adapter",
    hibernate: "org.hibernate:hibernate-c3p0",
    ehcache: [
        "org.hibernate:hibernate-jcache",
        "org.ehcache:ehcache",
        "javax.cache:cache-api",
    ],
    artemis: [
        "org.apache.activemq:artemis-server",
        "org.apache.activemq:artemis-stomp-protocol",
    ],
    amqp: [
        "org.apache.qpid:qpid-common",
        "org.apache.qpid:qpid-client",
        "geronimo-spec:geronimo-spec-jms",
    ],
]

allprojects {
    group = "org.candlepin"
    apply plugin: "maven"
    apply plugin: "nebula.lint"
    apply plugin: "io.spring.dependency-management"
    apply plugin: com.github.benmanes.gradle.versions.VersionsPlugin

    dependencyManagement {
        dependencies {
            dependency group: 'aopalliance', name: 'aopalliance', version: '1.0'
            dependency group: 'javax.inject', name: 'javax.inject', version: '1'
            dependency group: 'javax.transaction', name: 'jta', version: '1.1'
            dependency group: 'javax.persistence', name: 'javax.persistence-api', version: '2.2'
            dependency group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'
            dependency group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
            dependency group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.1'
            dependency group: 'javax.servlet', name: 'servlet-api', version: '2.5'
            dependency group: 'org.ehcache', name: 'ehcache', version: '3.8.0'
            dependency group: 'javax.cache', name: 'cache-api', version: '1.0.0'
            dependency group: 'org.mozilla', name: 'jss', version: '4.4.6'
            dependency group: 'ldapjdk', name: 'ldapjdk', version: '4.19'
            dependency group: 'org.quartz-scheduler', name: 'quartz', version: '2.3.2'
            dependency group: 'geronimo-spec', name: 'geronimo-spec-jms', version: '1.1-rc4'
            dependency group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.7'
            dependency group: 'org.slf4j', name: 'log4j-over-slf4j', version: '1.7.5'
            dependency group: 'logdriver', name: 'logdriver', version: '1.0'
            // Javascript engine
            dependency group: 'org.mozilla', name: 'rhino', version: '1.7R3'
            dependency group: 'org.hibernate.javax.persistence', name: 'hibernate-jpa-2.1-api', version: '1.0.2.Final'
            dependency group: 'org.hibernate.validator', name: 'hibernate-validator-annotation-processor', version: '6.1.5.Final'
            dependency group: 'org.hibernate', name: 'hibernate-jcache', version: '5.4.6.Final'
            dependency group: 'commons-codec', name: 'commons-codec', version: '1.11'
            dependency group: 'commons-collections', name: 'commons-collections', version: '3.2.2'
            dependency group: 'commons-io', name: 'commons-io', version: '1.4'
            dependency group: 'commons-lang', name: 'commons-lang', version: '2.5'
            dependency group: 'org.apache.commons', name: 'commons-lang3', version: '3.2.1'
            dependency group: 'com.googlecode.gettext-commons', name: 'gettext-commons', version: '0.9.8'
            dependency group: 'com.puppycrawl.tools', name: 'checkstyle', version: "$versions.checkstyle"
            dependency group: 'com.github.sevntu-checkstyle', name: 'sevntu-checks', version: '1.36.0'
            dependency group: 'com.google.inject', name: 'guice', version: "$versions.guice"
            // DB Drivers
            dependency group: 'org.postgresql', name: 'postgresql', version: '42.2.2'
            dependency group: 'mysql', name: 'mysql-connector-java', version: '8.0.20'
            dependency group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.3.0'
            dependency group: 'org.junit.vintage', name: 'junit-vintage-engine', version: "$versions.junit5"
            dependency group: 'junit', name: 'junit', version: '4.12'
            // Testing DB Drivers
            dependency group: 'org.hsqldb', name: 'hsqldb', version: '2.3.2'
            dependency group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
            dependency group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '5.3'
            dependency group: 'org.liquibase', name: 'liquibase-core', version: '3.1.0'
            dependency group: 'com.mattbertolini', name: 'liquibase-slf4j', version: '1.2.1'
            dependency group: 'org.eclipse.microprofile.config', name: 'microprofile-config-api', version:'1.3'
            dependency group: 'com.mchange', name: 'c3p0', version: '0.9.5.4'
            dependency group: 'org.keycloak', name: 'keycloak-servlet-filter-adapter', version: '7.0.0'

            dependencySet(group: "org.jboss.resteasy", version: "4.4.2.Final") {
                entry "resteasy-core"
                entry "resteasy-multipart-provider"
                entry "resteasy-jaxb-provider"
                entry "resteasy-guice"
                entry "resteasy-atom-provider"
            }
            dependencySet(group: "org.hibernate", version: "5.4.9.Final") {
                entry "hibernate-c3p0"
            }
            dependencySet(group: "org.hibernate.validator", version: "6.1.5.Final") {
                entry "hibernate-validator"
                entry "hibernate-validator-annotation-processor"
            }
            dependencySet(group: "org.apache.activemq", version: "2.12.0") {
                entry "artemis-server"
                entry "artemis-stomp-protocol"
            }
            dependencySet(group: "io.swagger", version: "1.5.7") {
                entry "swagger-jaxrs"
                entry "swagger-annotations"
            }
            dependencySet(group: "com.fasterxml.jackson.core", version: "$versions.jackson") {
                entry "jackson-annotations"
                entry "jackson-core"
                entry "jackson-databind"
            }
            dependencySet(group: "com.fasterxml.jackson.dataformat", version: "$versions.jackson") {
                entry "jackson-dataformat-yaml"
                entry "jackson-dataformat-xml"
            }
            dependencySet(group: "com.fasterxml.jackson.datatype", version: "$versions.jackson") {
                entry "jackson-datatype-hibernate5"
                entry "jackson-datatype-jdk8"
                entry "jackson-datatype-jsr310"
            }
            dependencySet(group: "com.fasterxml.jackson.jaxrs", version: "$versions.jackson") {
                entry "jackson-jaxrs-base"
                entry "jackson-jaxrs-json-provider"
            }
            dependencySet(group: "com.fasterxml.jackson.module", version: "$versions.jackson") {
                entry "jackson-module-jsonSchema"
                entry "jackson-module-jaxb-annotations"
            }
            dependencySet(group: "com.google.inject.extensions", version: "$versions.guice") {
                entry "guice-assistedinject"
                entry "guice-multibindings"
                entry "guice-servlet"
                entry "guice-throwingproviders"
                entry "guice-persist"
            }
            dependencySet(group: "com.sun.xml.bind", version: "2.3.0") {
                entry "jaxb-impl"
                entry "jaxb-core"
            }
            dependencySet(group: "net.oauth.core", version: "20100527") {
                entry "oauth"
                entry "oauth-provider"
            }
            //logging
            dependencySet(group: "ch.qos.logback", version: "1.2.3") {
                entry "logback-core"
                entry "logback-classic"
            }
            dependencySet(group: "org.slf4j", version: "1.7.12") {
                entry "jcl-over-slf4j"
                entry "log4j-over-slf4j"
            }
            dependencySet(group: "org.apache.qpid", version: "0.32") {
                entry "qpid-common"
                entry "qpid-client"
            }
            dependencySet(group: "org.jmock", version: "2.5.1") {
                entry "jmock"
                entry "jmock-junit4"
            }
            dependencySet(group: "org.mockito", version: "2.23.4") {
                entry "mockito-junit-jupiter"
                entry "mockito-core"
            }
            dependencySet(group: "org.junit.jupiter", version: "$versions.junit5") {
                entry "junit-jupiter-api"
                entry "junit-jupiter-params"
                entry "junit-jupiter-engine"
            }
            dependencySet(group: "org.hamcrest", version: "1.3") {
                entry "hamcrest-library"
                entry "hamcrest-core"
            }
        }
    }

    gradleLint {
        rules = ["dependency-parentheses"]
        // Turn these on selectively.  They are a little too sensitive to leave on all the time,
        // but they provide useful information when run occasionally.
        // rules = ["dependency-parentheses", "unused-exclude-by-dep"]
        // criticalRules = ["unused-dependency"]
    }
}

subprojects {
    apply plugin: "java"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        // options.compilerArgs << "-Xlint:deprecation"
    }

    repositories {
        mavenLocal()
        mavenCentral()

        maven { url "https://repo.jenkins-ci.org/public/" }
        maven { url "https://repository.jboss.org/nexus/content/groups/public/" }
        maven { url "https://oauth.googlecode.com/svn/code/maven/" }
        // For LogDriver
        maven { url "https://awood.fedorapeople.org/ivy/candlepin/" }
        // Temporary repo, which stores jss 4.4.6
        maven { url "https://barnabycourt.fedorapeople.org/repo/candlepin/" }
    }
}

project(":api") {
    apply plugin: "org.openapi.generator"
    apply plugin: "org.candlepin.gradle.SpecVersion"

    ext {
        api_spec_path = "${projectDir}/candlepin-api-spec.yaml"
        config_file = "${projectDir}/candlepin-api-config.json"
    }

    openApiGenerate {
      generatorName = "jaxrs-spec"
      inputSpec = api_spec_path
      configFile = config_file
      outputDir = "$buildDir/generated"
      configOptions = [
          interfaceOnly: true,
          generatePom: false,
          dateLibrary: "java8"
      ]
      templateDir = "$rootDir/buildSrc/src/main/resources/templates"
    }

    openApiValidate {
        inputSpec = api_spec_path
    }

    task generateApiDocs(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
        generatorName = "html"
        inputSpec = api_spec_path
        outputDir = "$buildDir/docs"
        generateApiDocumentation = true
        generateModelDocumentation = true
        generateModelTests = false
        generateApiTests = false
        withXml = false
    }

    task generateOpenApiJson(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
        generatorName = "openapi"
        inputSpec = api_spec_path
        outputDir = "$buildDir/generated"
        generateApiDocumentation = true
        generateModelDocumentation = true
        generateModelTests = false
        generateApiTests = false
        withXml = false
    }

    task pom {
        doLast {
            conf2ScopeMappings.addMapping(MavenPlugin.COMPILE_PRIORITY + 1, configurations.implementation, 'compile')
            pom {
                project {
                    name "Candlepin API"
                    description "OpenAPI-based API for Candlepin"
                    parent {
                        groupId "org.candlepin"
                        artifactId "candlepin-parent"
                        version "2.0"
                        relativePath ".."
                    }
                    packaging "jar"
                    build([:]) {
                        plugins {
                            plugin {
                                groupId 'org.openapitools'
                                artifactId 'openapi-generator-maven-plugin'
                                version "$openapi_version"
                                executions {
                                    execution {
                                        goals {
                                            goal 'generate'
                                        }
                                        configuration {
                                            inputSpec '${project.basedir}/candlepin-api-spec.yaml'
                                            generatorName 'jaxrs-spec'
                                            configurationFile '${project.basedir}/candlepin-api-config.json'
                                            configOptions {
                                                interfaceOnly 'true'
                                                generatePom 'false'
                                                dateLibrary 'java8'
                                                sourceFolder 'src/gen/java/main'
                                            }
                                            templateDirectory '../buildSrc/src/main/resources/templates'
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }.withXml {
                dependencyManagement.pomConfigurer.configurePom(asNode())
            }.writeTo("pom.xml")
        }
    }

    processResources {
        from "$buildDir/generated/openapi.json"
        from api_spec_path
        rename { String fileName ->
            api_spec_path.endsWith(fileName) ? 'openapi.yaml' : fileName  // rename yaml to openapi.yaml
        }
    }

    dependencies {
        compile 'com.fasterxml.jackson.core:jackson-annotations'
        compile 'javax.validation:validation-api'
        compile 'javax.ws.rs:javax.ws.rs-api'
        compile 'io.swagger:swagger-annotations'
    }

    sourceSets.main.java.srcDirs = ["${buildDir}/generated/src/gen/java"]
    compileJava.dependsOn tasks.openApiGenerate
    processResources.dependsOn tasks.generateOpenApiJson
}

configure(subprojects.findAll { it.name == "candlepin-common" || it.name == "candlepin" }) {
    apply plugin: "checkstyle"

    checkstyle {
        toolVersion = "$versions.checkstyle"
    }

    dependencies {
        checkstyle libraries.checkstyle
        checkstyle project(":checks")
    }

    test {
        useJUnitPlatform()

        // Sometimes causes out of memory on vagrant
        maxHeapSize = "2g"
        jvmArgs "-XX:+HeapDumpOnOutOfMemoryError"

        testLogging {
            // set options for log level LIFECYCLE
            events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED
                // TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
            showExceptions true
            showCauses true
            showStackTraces true

            // set options for log level DEBUG and INFO
            debug {
                events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
                exceptionFormat TestExceptionFormat.FULL
            }
            info.events = debug.events
            info.exceptionFormat = debug.exceptionFormat

            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                    def startItem = "|  ", endItem = "  |"
                    def repeatLength = startItem.length() + output.length() + endItem.length()
                    println("\n" + ("-" * repeatLength) + "\n" + startItem + output + endItem + "\n" + ("-" * repeatLength))
                }
            }
        }
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
