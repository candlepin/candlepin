import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

// vim: set expandtab sts=4 sw=4 ai:

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'org.yaml', name: 'snakeyaml', version: '1.19'
    }
}

plugins {
    id "nebula.lint" version "11.5.0"
    id "checkstyle"
}

version = "2.0"

ext.versions = [
    artemis: "2.4.0",
    resteasy: "3.5.1.Final",
    jackson: "2.10.1",
    swagger: "1.5.7",
    logback: "1.2.3",
    guice: "4.1.0",
    checkstyle: "8.2",
    jaxb: "2.3.0",
    junit5: "5.4.1",
    mockito: "2.23.4",
]

ext.libraries = [
    antlr: "antlr:antlr:2.7.7",
    resteasy: [
        "org.jboss.resteasy:resteasy-jaxrs:${versions.resteasy}",
        "org.jboss.resteasy:resteasy-jaxb-provider:${versions.resteasy}",
        "org.jboss.resteasy:resteasy-guice:${versions.resteasy}",
        "org.jboss.resteasy:resteasy-atom-provider:${versions.resteasy}",
        "org.jboss.resteasy:resteasy-multipart-provider:${versions.resteasy}",
        "org.scannotation:scannotation:1.0.3",
        "org.apache.httpcomponents:httpclient:4.3.6",
        "org.apache.james:apache-mime4j:0.6",
        "javax.mail:mail:1.4.7",
        "javax.ws.rs:javax.ws.rs-api:2.1",
        "javax.json.bind:javax.json.bind-api:1.0",
        "org.jboss.spec.javax.ws.rs:jboss-jaxrs-api_2.1_spec:1.0.0.Final",
        "javax.annotation:javax.annotation-api:1.3.2",
        "org.eclipse.microprofile.rest.client:microprofile-rest-client-api:1.0.1",
        "org.reactivestreams:reactive-streams:1.0.0.final",
    ],
    jackson: [
        "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}",
        "com.fasterxml.jackson.core:jackson-core:${versions.jackson}",
        "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}",
        "com.fasterxml.jackson.jaxrs:jackson-jaxrs-base:${versions.jackson}",
        "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:${versions.jackson}",
        "com.fasterxml.jackson.module:jackson-module-jsonSchema:${versions.jackson}",
        "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:${versions.jackson}",
        "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:${versions.jackson}",
        "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${versions.jackson}",
    ],
    swagger: [
        "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${versions.jackson}",
        "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${versions.jackson}",
        "io.swagger:swagger-jaxrs:${versions.swagger}",
        "io.swagger:swagger-core:${versions.swagger}",
        "io.swagger:swagger-models:${versions.swagger}",
        "io.swagger:swagger-annotations:${versions.swagger}",
        "org.reflections:reflections:0.9.10",
        "org.apache.commons:commons-lang3:3.2.1",
    ],
    sun_jaxb: [
        "com.sun.xml.bind:jaxb-impl:${versions.jaxb}",
        "com.sun.xml.bind:jaxb-core:${versions.jaxb}",
    ],
    core_testing: [
        "org.junit.jupiter:junit-jupiter-api:${versions.junit5}",
        "org.junit.jupiter:junit-jupiter-params:${versions.junit5}",
        "org.junit.jupiter:junit-jupiter-engine:${versions.junit5}",
        "org.junit.vintage:junit-vintage-engine:${versions.junit5}",
        "org.hamcrest:hamcrest-library:1.3",
        "org.hamcrest:hamcrest-core:1.3",
        "org.mockito:mockito-junit-jupiter:${versions.mockito}",
        "org.mockito:mockito-core:${versions.mockito}",
        "org.objenesis:objenesis:2.6",
        "net.bytebuddy:byte-buddy:1.9.3",
        "net.bytebuddy:byte-buddy-agent:1.9.3",
        "junit:junit:4.12",
    ],
    logging_deps: [
        "ch.qos.logback:logback-core:${versions.logback}",
        "ch.qos.logback:logback-classic:${versions.logback}",
        // Artifacts that bridge other logging frameworks to slf4j. Mime4j uses
        // JCL for example.
        "org.slf4j:jcl-over-slf4j:1.7.12",
        "org.slf4j:log4j-over-slf4j:1.7.12",
        "org.slf4j:slf4j-api:1.7.25",
        "net.logstash.logback:logstash-logback-encoder:5.3",
    ],
    javax: [
        "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final",
        "javax.transaction:jta:1.1",
        "javax.persistence:javax.persistence-api:2.2",
    ],
    commons: [
        "commons-codec:commons-codec:1.11",
        "commons-collections:commons-collections:3.2.2",
        "commons-io:commons-io:1.4",
        "commons-lang:commons-lang:2.5",
    ],
    guice: [
        "com.google.inject.extensions:guice-assistedinject:${versions.guice}",
        "com.google.inject.extensions:guice-multibindings:${versions.guice}",
        "com.google.inject.extensions:guice-servlet:${versions.guice}",
        "com.google.inject.extensions:guice-throwingproviders:${versions.guice}",
        "com.google.inject.extensions:guice-persist:${versions.guice}",
        "com.google.inject:guice:${versions.guice}",
        "aopalliance:aopalliance:1.0",
        "javax.inject:javax.inject:1",
    ],
    liquibase: "org.liquibase:liquibase-core:3.1.0",
    liquibase_slf4j: "com.mattbertolini:liquibase-slf4j:1.2.1",
    oauth: [
        "net.oauth.core:oauth:20100527",
        "net.oauth.core:oauth-provider:20100527",
    ],
    collections: "com.google.guava:guava:25.1-jre",
    hibernate_validator_ap: "org.hibernate.validator:hibernate-validator-annotation-processor:6.0.16.Final",
    checkstyle: "com.puppycrawl.tools:checkstyle:${versions.checkstyle}",
    gettext: "com.googlecode.gettext-commons:gettext-commons:0.9.8",
    javax_servlet: "javax.servlet:servlet-api:2.5",
    javax_validation: "javax.validation:validation-api:2.0.1.Final",
    jmock: [
        "org.jmock:jmock:2.5.1",
        "org.jmock:jmock-junit4:2.5.1",
    ],
    validator: [
        "org.hibernate.validator:hibernate-validator:6.0.16.Final",
        "org.hibernate.validator:hibernate-validator-annotation-processor:6.0.16.Final",
    ],
]

allprojects {
    group = "org.candlepin"
    apply plugin: "maven"
    apply plugin: "nebula.lint"

    gradleLint {
        rules = ["dependency-parentheses"]
        // Turn these on selectively.  They are a little too sensitive to leave on all the time,
        // but they provide useful information when run occasionally.
        // rules = ["dependency-parentheses", "unused-exclude-by-dep"]
        // criticalRules = ["unused-dependency"]
    }

    // TODO This is an eyesore. We should just be enabling transitive deps everywhere and then
    //  use https://docs.gradle.org/current/userguide/dependency_locking.html for releases.
    configurations.matching { !it.name.startsWith("checkstyle")}.all {
        dependencies.matching { !it.name.startsWith("junit")}.all {
            transitive = false
        }
    }
}

subprojects {
    apply plugin: "java"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        // options.compilerArgs << "-Xlint:deprecation"
    }

    repositories {
        mavenLocal()
        mavenCentral()

        maven { url "http://repo.jenkins-ci.org/public/" }
        maven { url "http://repository.jboss.org/nexus/content/groups/public/" }
        maven { url "http://oauth.googlecode.com/svn/code/maven/" }
        // For LogDriver
        maven { url "http://awood.fedorapeople.org/ivy/candlepin/" }
        // Temporary repo, which stores jss 4.4.6
        maven { url "http://barnabycourt.fedorapeople.org/repo/candlepin/" }
    }
}

configure(subprojects.findAll { it.name == "candlepin-common" || it.name == "candlepin" }) {
    apply plugin: "checkstyle"
    apply plugin: "org.candlepin.gradle.SpecVersion"

    checkstyle {
        toolVersion = "$versions.checkstyle"
    }

    dependencies {
        checkstyle libraries.checkstyle
        checkstyle project(":checks")
    }

    test {
        useJUnitPlatform()

        // Sometimes causes out of memory on vagrant
        maxHeapSize = "2g"
        jvmArgs "-XX:+HeapDumpOnOutOfMemoryError"

        testLogging {
            // set options for log level LIFECYCLE
            events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED
                // TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
            showExceptions true
            showCauses true
            showStackTraces true

            // set options for log level DEBUG and INFO
            debug {
                events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
                exceptionFormat TestExceptionFormat.FULL
            }
            info.events = debug.events
            info.exceptionFormat = debug.exceptionFormat

            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                    def startItem = "|  ", endItem = "  |"
                    def repeatLength = startItem.length() + output.length() + endItem.length()
                    println("\n" + ("-" * repeatLength) + "\n" + startItem + output + endItem + "\n" + ("-" * repeatLength))
                }
            }
        }
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
