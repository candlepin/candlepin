import groovy.text.GStringTemplateEngine
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent
import org.yaml.snakeyaml.Yaml

buildscript {
    //openapi version has to be set manually in the plugins block as well.
    ext.openapi_version = '5.2.1'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'org.yaml', name: 'snakeyaml', version: '1.19'
    }
}

plugins {
    id "nebula.lint" version "16.2.3"
    /*
    The Versions plugin is used to provide the dependencyUpdates task which is used
    to look for libraries that have newer versions available.
     */
    id "com.github.ben-manes.versions" version "0.28.0"
    // Openapi version is set in the buildscript block for use in the pom generation as well
    id "org.openapi.generator" version '5.2.1'
    id "java"
    id "maven-publish"
    id "war"
    id "checkstyle"
    id 'org.owasp.dependencycheck' version '6.2.2'
    id "jacoco"
    id "org.sonarqube" version "3.2.0"


    // The following are plugins are plugins we wrote in the buildSrc folder
    id 'org.candlepin.gradle.gettext'
    id 'org.candlepin.gradle.msgfmt'
    id "org.candlepin.gradle.SpecVersion"
    id "org.candlepin.gradle.PomToolkit"
}

group = "org.candlepin"

ext {
    api_spec_path = "${projectDir}/api/candlepin-api-spec.yaml"
    config_file = "${projectDir}/api/candlepin-api-config.json"

    cpdb_username = "candlepin"
    cpdb_password = ""
    db_name = "candlepin"

    if (project.findProperty("hidden_resources")) {
        hidden_resources = project.findProperty("hidden_resources")
    }

    if (project.findProperty("hidden_capabilities")) {
        hidden_capabilities = project.findProperty("hidden_capabilities")
    }

    if (!project.findProperty("db_host") ||
            (project.findProperty("db_host") && "".equals(project.findProperty("db_host")))) {
        db_host = "localhost"
    }

    if (project.findProperty("app_db_name") && !"".equals(project.findProperty("app_db_name"))) {
        db_name = project.findProperty("app_db_name")
    }

    // If MYSQL set up the mysql stuff else set up postgres (default)
    if (project.findProperty("database_server") == "mysql") {
        jdbc_driver_class = "com.mysql.jdbc.Driver"
        jdbc_dialect = "org.hibernate.dialect.MySQL5InnoDBDialect"
        jdbc_quartz_driver_class = "org.quartz.impl.jdbcjobstore.StdJDBCDelegate"
        jdbc_url = "jdbc:mysql://${db_host}/${db_name}"
    } else {
        jdbc_driver_class = "org.postgresql.Driver"
        jdbc_dialect = "org.hibernate.dialect.PostgreSQL92Dialect"
        jdbc_quartz_driver_class = "org.quartz.impl.jdbcjobstore.PostgreSQLDelegate"
        jdbc_url = "jdbc:postgresql://${db_host}/${db_name}"
    }

    external_broker = "true".equals(project.findProperty("external_broker"))
    hostedtest = "true".equals(project.findProperty("hostedtest"))
    async_scheduler_enabled = !project.findProperty("async_scheduler_enabled") ||
            "true".equals(project.findProperty("async_scheduler_enabled"))

    generatedMetamodels = "${buildDir}/generated/api/src/gen/java"
}

ext {
    // Denotes BOM versions
    resteasy_version = "4.4.3.Final"
    jackson_version = "2.14.0"
    guice_version = "4.2.3"
    junit_version = "5.7.0"
}

dependencies {
    // Commons
    implementation "commons-codec:commons-codec:1.11"
    implementation "commons-collections:commons-collections:3.2.2"
    implementation "commons-io:commons-io:2.7"
    implementation "commons-lang:commons-lang:2.5"

    // Collections
    implementation "com.google.guava:guava:30.1-jre"

    // Gettext libraries used for internationalization & translation
    implementation "com.googlecode.gettext-commons:gettext-commons:0.9.8"

    // Guice Libraries
    implementation "com.google.inject.extensions:guice-assistedinject:$guice_version"
    implementation "com.google.inject.extensions:guice-servlet:$guice_version"
    implementation "com.google.inject.extensions:guice-throwingproviders:$guice_version"
    implementation "com.google.inject.extensions:guice-persist:$guice_version"

    // Jackson
    implementation "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$jackson_version"
    implementation "com.fasterxml.jackson.module:jackson-module-jsonSchema:$jackson_version"

    // Bean validation API is explicitly added to this version
    // This is a transitive dependency of
    // com.fasterxml.jackson.module:jackson-module-jsonSchema
    implementation "javax.validation:validation-api:2.0.1.Final"

    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:$jackson_version"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jackson_version"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jackson_version"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jackson_version"

    // Javax
    implementation "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final"
    implementation "javax.transaction:jta:1.1"
    implementation "javax.annotation:javax.annotation-api:1.3.2"

    // Liqubase
    implementation "org.liquibase:liquibase-core:3.1.0"

    // Logging
    implementation "ch.qos.logback:logback-classic:1.2.9"
    // Artifacts that bridge other logging frameworks to slf4j. Mime4j uses
    // JCL for example.
    implementation "org.slf4j:jcl-over-slf4j:1.7.32"
    implementation "org.slf4j:log4j-over-slf4j:1.7.32"
    implementation "net.logstash.logback:logstash-logback-encoder:7.0.1"

    // Oauth
    implementation "net.oauth.core:oauth-provider:20100527"

    // Resteasy
    implementation "org.jboss.resteasy:resteasy-guice:$resteasy_version"
    implementation "org.jboss.resteasy:resteasy-atom-provider:$resteasy_version"
    implementation "org.jboss.resteasy:resteasy-multipart-provider:$resteasy_version"

    implementation "javax.ws.rs:javax.ws.rs-api:2.1"

    // Sun jaxb
    implementation "com.sun.xml.bind:jaxb-impl:2.3.0"
    implementation "com.sun.xml.bind:jaxb-core:2.3.0"

    // Swagger
    implementation "io.swagger:swagger-annotations:1.5.7"
    implementation "org.reflections:reflections:0.9.10"

    // Validator
    implementation "org.hibernate.validator:hibernate-validator:6.1.5.Final"
    implementation "org.hibernate.validator:hibernate-validator-annotation-processor:6.1.5.Final"

    // Hibernate
    implementation 'org.hibernate:hibernate-c3p0:5.4.9.Final'
    // Ehcache (for use with hibernate primarily)
    implementation "org.hibernate:hibernate-jcache:5.4.6.Final"
    implementation "org.ehcache:ehcache:3.8.0"
    implementation "javax.cache:cache-api:1.0.0"

    // Artemis server & client
    implementation "org.apache.activemq:artemis-server:2.27.0"
    implementation "org.apache.activemq:artemis-stomp-protocol:2.27.0"

    // Javascript Engine
    implementation "org.mozilla:rhino:1.7R3"

    implementation "org.quartz-scheduler:quartz:2.3.2"

    // Keycloak
    implementation "org.keycloak:keycloak-servlet-filter-adapter:15.0.1"

    // Hibernate JPA integration
    implementation "org.hibernate:hibernate-jpamodelgen:5.4.18.Final"

    annotationProcessor 'org.hibernate:hibernate-jpamodelgen:5.4.18.Final'

    checkstyle "com.puppycrawl.tools:checkstyle:8.29"
    checkstyle "com.github.sevntu-checkstyle:sevntu-checks:1.36.0"

    // Use wildcard because this could be called jss4.jar or jss.jar
    // (depending on if we are before Fedora35/RHEL9 or after)
    providedCompile fileTree(dir: '/usr/lib64/jss', include: '*.jar')
    providedCompile "javax.servlet:servlet-api:2.5"

    // DB Drivers
    runtimeOnly "org.postgresql:postgresql:42.3.3"
    runtimeOnly "mysql:mysql-connector-java:8.0.20"
    runtimeOnly "org.mariadb.jdbc:mariadb-java-client:2.3.0"

    testRuntimeOnly "org.hsqldb:hsqldb:2.6.1"
    testRuntimeOnly "org.glassfish:javax.el:3.0.0"

    // Core testing libraries
    // Junit 5
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit_version"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:$junit_version"
    testImplementation "org.junit.vintage:junit-vintage-engine:$junit_version"

    testImplementation "org.hamcrest:hamcrest-library:1.3"
    testImplementation "org.mockito:mockito-junit-jupiter:2.23.4"
    testImplementation "junit:junit:4.13.1"
    testImplementation "com.mattbertolini:liquibase-slf4j:1.2.1"

    // For JMock
    testImplementation "org.jmock:jmock-junit4:2.11.0"
}

// Copy the resources to the main classes directory so that the
// persistence context is in the the same classpath entry for
// Hibernate annotation based discovery.
sourceSets.main.output.resourcesDir = new File(buildDir, "classes/java/main")

compileJava.dependsOn(processResources)

// Add the openapi generated classes to the main java source sets to compile in the generated interfaces
sourceSets {
    main.java.srcDir generatedMetamodels
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

gradleLint {
    rules = ["dependency-parentheses"]
    // Turn these on selectively.  They are a little too sensitive to leave on all the time,
    // but they provide useful information when run occasionally.
    // rules = ["dependency-parentheses", "unused-exclude-by-dep"]
    // criticalRules = ["unused-dependency"]
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    // options.compilerArgs << "-Xlint:deprecation"
    // options.compilerArgs.addAll(['--release', '8'])
}

repositories {
    mavenLocal()
    mavenCentral()

    maven { url "https://repo.jenkins-ci.org/public/" }
    maven { url "https://repository.jboss.org/nexus/content/groups/public/" }
    maven { url "https://oauth.googlecode.com/svn/code/maven/" }
    maven { url "https://awood.fedorapeople.org/ivy/candlepin/" }
    maven { url "https://barnabycourt.fedorapeople.org/repo/candlepin/" }
}

openApiGenerate {
    generatorName = "jaxrs-spec"
    inputSpec = api_spec_path
    configFile = config_file
    outputDir = "$buildDir/generated/api"
    configOptions = [
            interfaceOnly: 'true',
            generatePom: 'false',
            dateLibrary: "java8"
    ]
    templateDir = "$rootDir/buildSrc/src/main/resources/templates"
}

openApiValidate {
    inputSpec = api_spec_path
}

task generateApiDocs(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "html"
    inputSpec = api_spec_path
    outputDir = "$buildDir/docs"
    generateApiDocumentation = true
    generateModelDocumentation = true
    generateModelTests = false
    generateApiTests = false
    withXml = false
}

task generateOpenApiJson(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "openapi"
    inputSpec = api_spec_path
    outputDir = "$buildDir/generated/json"
    generateApiDocumentation = true
    generateModelDocumentation = true
    generateModelTests = false
    generateApiTests = false
    withXml = false
}

// Create a single checkstyle task to make it easier to run both the checkstyleMain & checkstyleTest targets
task checkstyle(dependsOn: [tasks.checkstyleMain, tasks.checkstyleTest]) {
    description = 'Run checkstyle for both the Main & Test targets'
    group = 'Verification'
}

//Update the compileJava & processResourcesTasks depend on the openapi generation so that the generated classes
//can be used during compilation.
compileJava.dependsOn tasks.openApiGenerate
processResources.dependsOn tasks.generateOpenApiJson

gettext {
    keys_project_dir = "${project.rootDir}/"
}

msgfmt {
    resource "org.candlepin.common.i18n.Messages"
}

test {
    useJUnitPlatform()

    // Sometimes causes out of memory on vagrant
    maxHeapSize = "2g"
    jvmArgs = [
            // We need to load the native jss lib (either libjss4.so or libjss.so) from this directory
            '-Djava.library.path=/usr/lib64/jss',
            '-XX:+HeapDumpOnOutOfMemoryError'
    ]

    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
            TestLogEvent.PASSED,
            TestLogEvent.SKIPPED
            // TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_ERROR,
                TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = "|  ", endItem = "  |"
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println("\n" + ("-" * repeatLength) + "\n" + startItem + output + endItem + "\n" + ("-" * repeatLength))
            }
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
    }

    doLast {
        println "Generated unit test coverage report at $buildDir/reports/jacoco/test/html/index.html"
    }
}

// User-friendly alias for jacocoTestReport task
task coverage {
    dependsOn jacocoTestReport
}

project.tasks["sonarqube"].dependsOn "test"
project.tasks["sonarqube"].dependsOn "coverage"

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

clean.doFirst {
    delete "${rootDir}/buildSrc/build"
    // Maven clean up
    delete "${rootDir}/src/main/webapp/docs/candlepin-api-spec.yaml"
    delete "${rootDir}/target"
}

// substitute the version & release in the version.properties used by the status resource at runtime
processResources {
    from("src/main/resources") {
        duplicatesStrategy = "include"
        include "version.properties"
        expand([version: project.getVersion(), release: project.findProperty("release")])
    }
}

task rspec(type: Rspec)

// A task to generate the the candlepin config file for use in etc or other locations.
task generateConfig() {
    dependsOn ":processResources"
    def template = file("$projectDir/config/candlepin/candlepin.conf.template")
    def targetFile = file("$buildDir/candlepin.conf")
    doLast {
        def defaults = [candlepin: project.ext.properties]
        def binding = [candlepin: defaults['candlepin']]

        try {
            def custom = new Yaml().load(new File("$projectDir/custom.yaml").newInputStream())
            // Overwrite the defaults with the values from custom.yaml
            // We have to use the key 'candlepin' instead of 'candlepin.conf' since the dot in the
            // key name would otherwise be interpreted as a dereference in the template.
            if (custom && custom['candlepin.conf']) {
                binding['candlepin'] << custom['candlepin.conf']
            }
        }
        catch (FileNotFoundException e) {
            println "No custom.yaml found.  Using defaults."
        }

        // change contents via cli options
        // change file contents
        def tmp = new GStringTemplateEngine()
                .createTemplate(template)
                .make(binding)
        targetFile.write(tmp.toString(), "UTF-8")
    }
}
assemble.dependsOn(generateConfig)

// task to generate candlepin-api jar that Hosted adapters build against
// invoked as `./gradlew apiJar`
task apiJar(type: Jar) {
    archiveBaseName = 'candlepin-api'
    from sourceSets.main.output
    includes = [
            'auth',
            'config',
            'controller',
            'jackson',
            'model',
            'pki',
            'resteasy',
            'service',
            'util'
    ].collect { "/org/candlepin/${it}/" }
    duplicatesStrategy = 'exclude'
}

war {
    if (!hostedtest) {
        rootSpec.exclude("**/hostedtest/**")
    }
    manifest {
        attributes(
                "Implementation-Title": "The Candlepin Project",
                "Copyright": "Red Hat, Inc. 2009-" + new Date().format("y")
        )
    }
    // Copy the license file into place in the final manifest
    from(projectDir) {
        include "LICENSE"
        into("META-INF")
    }

    from("./api") {
        include "candlepin-api-spec.yaml"
        into("docs")
    }
    from("$buildDir/generated/api/src/main/openapi") {
        include "openapi.yaml"
        into("WEB-INF/classes")
    }
    from("$buildDir/generated/json") {
        include "openapi.json"
        into("WEB-INF/classes")
    }
}

// Exclude the generated i18n translation files from checkstyle
tasks.withType(Checkstyle) {
    exclude "**/i18n/Messages*"
}

task pom {
    dependsOn "generatePomFileForLocalPublication"
}

publishing {
  publications {
    local(MavenPublication) {

        generatePomFileForLocalPublication {
           destination = file("./pom.xml")
        }

        pom {
            description = 'The Candlepin Entitlement Engine'
            packaging = 'war'
            licenses {
                license {
                    name = 'GNU Public License (GPL) version 2.0'
                    url = 'http://www.gnu.org/licenses/gpl-2.0.html'
                    distribution = 'repo'
                }
            }

            scm {
                connection = 'scm:git:git://github.com/candlepin/candlepin.git'
                developerConnection = 'scm:git:git@github.com:candlepin/candlepin.git'
            }

            pom.withXml {
                PomToolkit.generatePomDependencies(
                    asNode(),
                    configurations.annotationProcessor.dependencies,
                    configurations.compileOnly.dependencies,
                    configurations.implementation.dependencies,
                    configurations.providedCompile.dependencies,
                    configurations.runtimeOnly.dependencies,
                    configurations.testImplementation.dependencies,
                    configurations.testRuntimeOnly.dependencies
                )

                PomToolkit.generateRepositories(asNode())
                PomToolkit.generateBuild(asNode())
                PomToolkit.generateProfiles(asNode())
            }
        }
    }
  }
}
