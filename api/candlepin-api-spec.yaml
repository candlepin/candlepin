openapi: 3.0.2
info:
  title: Candlepin
  description: Candlepin is a subscription management server written in Java. It helps with management of software subscriptions.
  version: 3.0.0-draft

servers:
  - url: /candlepin

security:
  - basicAuth: []

paths:
  /:
    get:
      description: Retrieves a list of links corresponding to Root resources
      tags:
        - root
      operationId: getRootResources
      security: []  # this resource doesn't require auth
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Link'
        default:
          $ref: '#/components/responses/default'

  /consumers/{consumer_uuid}/guestids:
    get:
      description: Retrieves the list of a Consumer's Guests
      tags:
        - GuestIds
      operationId: getGuestIds
      x-java-response:
        type: Iterable
        isContainer: true
      security: []
      parameters:
        - name: consumer_uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: A successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GuestIdDTOArrayElement'
        default:
          $ref: '#/components/responses/default'

    put:
      description: Updates the list of guests on a consumer.
      tags:
        - GuestIds
      operationId: updateGuests
      security: []
      parameters:
        - name: consumer_uuid
          in: path
          description: The UUID of the consumer who owns or hosts the guest
          required: true
          schema:
            type: string
      requestBody:
        description: The list of the guests to be updated
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/GuestIdDTO'
      responses:
        200:
          description: A successful operation
        default:
          $ref: '#/components/responses/default'

  /consumers/{consumer_uuid}/guestids/{guest_id}:
    get:
      description: Retrieves a single Guest by its consumer and the guest UUID
      tags:
        - GuestIds
      operationId: getGuestId
      security: []
      parameters:
        - name: consumer_uuid
          in: path
          description: The UUID of the consumer to retrieve guest
          required: true
          schema:
            type: string
        - name: guest_id
          in: path
          description: The UUID of the guest to retrieve
          required: true
          schema:
            type: string
      responses:
        200:
          description: A successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuestIdDTO'
        404:
          description: A Guest could not be found using the provided UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
        default:
          $ref: '#/components/responses/default'

    put:
      description: Updates a single Guest on a Consumer. Allows virt-who to avoid uploading an entire list of guests
      tags:
        - GuestIds
      operationId: updateGuest
      security: []
      parameters:
        - name: consumer_uuid
          in: path
          description: The UUID of the consumer who owns or hosts the guest
          required: true
          schema:
            type: string
        - name: guest_id
          in: path
          description: The UUID of the guest to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Updated guest data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GuestIdDTO'
      responses:
        200:
          description: A successful operation
        400:
          description: Provided Guest UUID is not valid or does not match with guest UUID in JSON
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
        404:
          description: A Consumer could not be found using the provided UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
        default:
          $ref: '#/components/responses/default'

    delete:
      description: Removes the guest from the consumer
      tags:
        - GuestIds
      operationId: deleteGuest
      security: []
      parameters:
        - name: consumer_uuid
          in: path
          description: The UUID of the consumer who owns or hosts the guest
          required: true
          schema:
            type: string
        - name: guest_id
          in: path
          description: The UUID of the guest to be deleted
          required: true
          schema:
            type: string
        - name: unregister
          in: query
          description: Unregister the consumer
          required: true
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: A successful operation
        400:
          description: Provided guest uuid is not valid or does not match with guest uuid in JSON
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
        403:
          description: The consumer cannot unregister becuase of unknown type or invalid credentails
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
        404:
          description: The consumer and/or guest could not be found using the provided uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
        410:
          description: A consumer was already deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
        default:
          $ref: '#/components/responses/default'

  /consumertypes:
    get:
      description: Retrieves a list of known consumer types
      tags:
          - Consumer
          - ConsumerType
      operationId: getConsumerTypes
      x-java-response:
        type: Iterable
        isContainer: true
      security: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConsumerTypeDTO'
        default:
          $ref: '#/components/responses/default'

    post:
      description: Creates a new consumer type
      tags:
        - Consumer
        - ConsumerType
      operationId: createConsumerType
      security: []
      requestBody:
          description: The consumer type to create
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerTypeDTO'
      responses:
        200:
          description: ''
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ConsumerTypeDTO'
        default:
          $ref: '#/components/responses/default'

  /consumertypes/{id}:
    get:
      description: Retrieves a specific consumer type
      tags:
          - Consumer
          - ConsumerType
      operationId: getConsumerType
      security: []
      parameters:
      - name: id
        in: path
        description: The ID of the consumer type to retrieve
        required: true
        schema:
          type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerTypeDTO'
        404:
          description: A consumer type could not be found using the provided ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: A consumer type could not be found using the provided ID
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        default:
          $ref: '#/components/responses/default'

    put:
      description: Updates an existing consumer type
      tags:
        - Consumer
        - ConsumerType
      operationId: updateConsumerType
      security: []
      parameters:
      - name: id
        in: path
        description: The ID of the consumer type to update
        required: true
        schema:
          type: string
      requestBody:
          description: The fields and updated values to apply to the specified consumer type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerTypeDTO'
      responses:
        200:
          description: ''
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ConsumerTypeDTO'
        404:
          description: A consumer type could not be found using the provided ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: A consumer type could not be found using the provided ID
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        default:
          $ref: '#/components/responses/default'

    delete:
      description: Deletes an existing consumer type
      tags:
          - Consumer
          - ConsumerType
      operationId: deleteConsumerType
      security: []
      parameters:
      - name: id
        in: path
        description: The ID of the consumer type to delete
        required: true
        schema:
          type: string
      responses:
        204:
          description: ''
        404:
          description: A consumer type could not be found using the provided ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: A consumer type could not be found using the provided ID
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        default:
          $ref: '#/components/responses/default'
  /cdn:
    get:
      description: Retrieves a list of CDN's
      tags:
        - Cdn
      operationId: getContentDeliveryNetworks
      x-java-response:
        type: Iterable
        isContainer: true
      security: []
      responses:
        200:
          description: A list of CDN's
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CdnDTO'
        default:
          $ref: '#/components/responses/default'

    post:
      tags:
        - Cdn
      description: Creates a new CDN
      operationId: createCdn
      security: []
      requestBody:
        description: CDN to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CdnDTO'
      responses:
        200:
          description: CDN successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdnDTO'
        400:
          description: CDN label already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: CDN label already exists
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        default:
          $ref: '#/components/responses/default'

  /cdn/{label}:
    put:
      tags:
        - Cdn
      description: Updates a CDN
      operationId: updateCdn
      security: []
      parameters:
        - name: label
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Fields that needs to be updated for specified CDN
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CdnDTO'
      responses:
        200:
          description: CDN successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdnDTO'
        404:
          description: No such content delivery network
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: No such content delivery network
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        default:
          $ref: '#/components/responses/default'

    delete:
      tags:
        - Cdn
      description: Deletes a CDN
      operationId: deleteCdn
      security: []
      parameters:
        - name: label
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: CDN successfully deleted
        500:
          description: Multiple CDN instances found with the same label
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: Multiple CDN instances found with the same label
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        default:
          $ref: '#/components/responses/default'

  /content:
    get:
      tags:
        - Content
      description: Retrieves list of Content
      operationId: listContent
      x-java-response:
        type: Iterable
        isContainer: true
      security: []
      responses:
        200:
          description: Content successfully listed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContentDTO'
        default:
          $ref: '#/components/responses/default'

  /content/{content_uuid}:
    get:
      tags:
        - Content
      description: Retrieves a single Content
      operationId: getContent
      security: []
      parameters:
        - name: content_uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Content successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentDTO'
        404:
          description: Content with the given UUID was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: Content with the given UUID was not found
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        default:
          $ref: '#/components/responses/default'

  /deleted_consumers:
    get:
      description: Retrieves a list of deleted consumers by deletion date or all. List returned is the deleted Consumers.
      tags:
        - Consumer
        - DeletedConsumer
      operationId: listByDate
      parameters:
        - in: query
          name: date
          schema:
            type: string
          description: Filter deleted consumers to those on or after this date
      x-java-response:
        type: Iterable
        isContainer: true
      security: []
      responses:
        200:
          description: A list of deleted consumers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeletedConsumerDTO'
        400:
          description: Date is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: Date is invalid
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: Not Found
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        default:
          $ref: '#/components/responses/default'

  /distributor_versions:
    get:
      tags:
        - DistributorVersions
      description: Retrieves a list of Distributor Versions
      operationId: getVersions
      x-java-response:
        type: java.util.stream.Stream
        isContainer: true
      security: []
      parameters:
        - name: name_search
          in: query
          required: false
          schema:
            type: string
        - name: capability
          in: query
          required: false
          schema:
            type: string
      responses:
        200:
          description: A successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DistributorVersionDTO'
        default:
          $ref: '#/components/responses/default'

    post:
      tags:
        - DistributorVersions
      description: Creates a Distributor Version
      operationId: create
      security: []
      requestBody:
        description: A new distributor version to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DistributorVersionDTO'
      responses:
        200:
          description: A successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DistributorVersionDTO'
        400:
          description: A distributor version already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: A distributor version already exists
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        default:
          $ref: '#/components/responses/default'

  /distributor_versions/{id}:
    put:
      tags:
        - DistributorVersions
      description: Updates a Distributor Version
      operationId: update
      security: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: The fields and updated values to apply to the specified distributor version
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DistributorVersionDTO'
      responses:
        200:
          description: A successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DistributorVersionDTO'
        404:
          description: A distibutor version could not be found using the provided ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: A distibutor version could not be found using the provided ID
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        default:
          $ref: '#/components/responses/default'

    delete:
      tags:
        - DistributorVersions
      description: Deletes a Distributor Version
      operationId: delete
      security: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: A successful operation
        404:
          description: Distributor version could not be found using the provided ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: Distributor version could not be found using the provided ID
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        default:
          $ref: '#/components/responses/default'

  /jobs:
    get:
      description: Fetches a set of job statuses matching the given filter options
      tags:
        - Jobs
      operationId: listJobStatuses
      parameters:
        - in: query
          name: id
          schema:
            type: array
            uniqueItems: true
            items:
              type: string
          description: Filter jobs based on ids
        - in: query
          name: key
          schema:
            type: array
            uniqueItems: true
            items:
              type: string
          description: Filter jobs based on keys
        - in: query
          name: state
          schema:
            type: array
            uniqueItems: true
            items:
              type: string
          description: Filter jobs based on statuses
        - in: query
          name: owner
          schema:
            type: array
            uniqueItems: true
            items:
              type: string
          description: Filter jobs based on owners
        - in: query
          name: principal
          schema:
            type: array
            uniqueItems: true
            items:
              type: string
          description: Filter jobs based on principals
        - in: query
          name: origin
          schema:
            type: array
            uniqueItems: true
            items:
              type: string
          description: Filter jobs based on origins
        - in: query
          name: executor
          schema:
            type: array
            uniqueItems: true
            items:
              type: string
          description: Filter jobs based on executors
        - in: query
          name: after
          schema:
            type: string
            format: date-time
          description: Filter jobs to those on or after this date
        - in: query
          name: before
          schema:
            type: string
            format: date-time
          description: Filter jobs to those on or before this date
      x-java-response:
        type: java.util.stream.Stream
        isContainer: true
      security: []
      responses:
        200:
          description: A set of job statuses matching the given filter options
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AsyncJobStatusDTO'
        400:
          description: Invalid date range.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: Invalid date range.
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        404:
          description: Unknown job states.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: Unknown job states.
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        default:
          $ref: '#/components/responses/default'

    delete:
      description: Cleans up terminal jobs matching the provided criteria
      tags:
        - Jobs
      operationId: cleanupTerminalJobs
      parameters:
        - in: query
          name: id
          schema:
            type: array
            uniqueItems: true
            items:
              type: string
          description: Cleans up jobs based on ids
        - in: query
          name: key
          schema:
            type: array
            uniqueItems: true
            items:
              type: string
          description: Cleans up jobs based on keys
        - in: query
          name: state
          schema:
            type: array
            uniqueItems: true
            items:
              type: string
          description: Cleans up jobs based on statuses
        - in: query
          name: owner
          schema:
            type: array
            uniqueItems: true
            items:
              type: string
          description: Cleans up jobs based on owners
        - in: query
          name: principal
          schema:
            type: array
            uniqueItems: true
            items:
              type: string
          description: Cleans up jobs based on principals
        - in: query
          name: origin
          schema:
            type: array
            uniqueItems: true
            items:
              type: string
          description: Cleans up jobs based on origins
        - in: query
          name: executor
          schema:
            type: array
            uniqueItems: true
            items:
              type: string
          description: Cleans up jobs based on executors
        - in: query
          name: after
          schema:
            type: string
            format: date-time
          description: Cleans up jobs to those on or after this date
        - in: query
          name: before
          schema:
            type: string
            format: date-time
          description: Cleans up jobs to those on or before this date
        - in: query
          name: force
          schema:
            type: boolean
            default: false
          description: Cleans up job forcefully
      security: []
      responses:
        200:
          description: Cleaned up jobs count
          content:
            application/json:
              schema:
                type: integer
        400:
          description: Invalid date range
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: Invalid date range
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        404:
          description: Unknown job states
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: Unknown job states
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        default:
          $ref: '#/components/responses/default'

  /jobs/{id}:
    get:
      description: Fetches the job status associated with the specified job ID
      tags:
        - Jobs
      operationId: getJobStatus
      parameters:
        - in: path
          name: id
          description: The ID of the job to retrieve
          required: true
          schema:
            type: string
      security: []
      responses:
        200:
          description: Job status associated with the specified job ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncJobStatusDTO'
        400:
          description: Job ID is null or empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: Job ID is null or empty
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        404:
          description: A job could not be found using the provided ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: A job could not be found using the provided ID
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        default:
          $ref: '#/components/responses/default'

    delete:
      description: Cancels the job associated with the specified job ID
      tags:
        - Jobs
      operationId: cancelJob
      parameters:
        - in: path
          name: id
          description: The ID of the job to cancel
          required: true
          schema:
            type: string
      security: []
      responses:
        200:
          description: Job status associated with the specified job ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncJobStatusDTO'
        400:
          description: Job ID is null or empty or
            job is already in a terminal state or otherwise cannot be canceled at this time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: Job ID is null or empty.
                  job is already in a terminal state or otherwise cannot be canceled at this time
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        404:
          description: A job could not be found using the provided ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: A job could not be found using the provided ID
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        default:
          $ref: '#/components/responses/default'

  /jobs/scheduler:
    get:
      description: Fetches the status of the job scheduler for this Candlepin node
      tags:
        - Jobs
      operationId: getSchedulerStatus
      security: []
      responses:
        200:
          description: Status of the job scheduler for this Candlepin node
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchedulerStatusDTO'
        default:
          $ref: '#/components/responses/default'

    post:
      description: Enables or disables the job scheduler for this Candlepin node
      tags:
        - Jobs
      parameters:
        - in: query
          name: running
          description: Boolean value to set running status
          schema:
            type: boolean
            default: true
      operationId: setSchedulerStatus
      security: []
      responses:
        200:
          description: Status of the job scheduler for this Candlepin node
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchedulerStatusDTO'
        500:
          description: Error setting scheduler status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: Error setting scheduler status
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        default:
          $ref: '#/components/responses/default'

  /jobs/schedule/{jobKey}:
    post:
      description: Schedules a job using the specified key and job properties
      parameters:
        - in: path
          name: jobKey
          description: Job key
          required: true
          schema:
            type: string
      tags:
        - Jobs
      operationId: scheduleJob
      security: []
      responses:
        200:
          description: Status of the job scheduler for this Candlepin node
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncJobStatusDTO'
        400:
          description: Job key is null or empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: Job key is null or empty
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        403:
          description: Job is not configured for manual scheduling
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: Job is not configured for manual scheduling
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        500:
          description: An unexpected exception has occurred while scheduling job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: An unexpected exception has occurred while scheduling job
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        default:
          $ref: '#/components/responses/default'

  /roles:
    get:
      description: Retrieves a list of Roles
      tags:
        - Roles
      operationId: getRoles
      x-java-response:
        type: java.util.stream.Stream
        isContainer: true
      security: []
      responses:
        200:
          description: A list of roles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleDTO'
        default:
          $ref: '#/components/responses/default'

    post:
      tags:
        - Roles
      description: Creates a Role
      operationId: createRole
      security: []
      requestBody:
        description: A role to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleDTO'
      responses:
        200:
          description: Role successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDTO'
        400:
          description: Role is null or empty or role name not specified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: Role is null or empty or role name not specified
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        409:
          description: Role already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: Role already exists
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        default:
          $ref: '#/components/responses/default'

  /roles/{role_name}:
    get:
      description: Retrieves a single role by its name.
      tags:
        - Roles
      operationId: getRoleByName
      parameters:
        - in: path
          name: role_name
          description: Role name
          required: true
          schema:
            type: string
      security: []
      responses:
        200:
          description: Returns a role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDTO'
        400:
          description: Role name is null or empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: Role name is null or empty
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        404:
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: Role not found
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        default:
          $ref: '#/components/responses/default'

    put:
      description: Updates Role. To avoid race conditions, we do not support updating the user or permission
        collections. Currently this call will only update the role name. See the specific nested POST/DELETE
        calls for modifying users and permissions.
      tags:
        - Roles
      operationId: updateRole
      security: []
      parameters:
        - name: role_name
          in: path
          description: Role name
          required: true
          schema:
            type: string
      requestBody:
        description: Role
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleDTO'
      responses:
        200:
          description: Returns updated role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDTO'
        400:
          description: Role name is null or empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: Role name is null or empty
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        404:
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: Role not found
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        default:
          $ref: '#/components/responses/default'

    delete:
      description: Removes a Role
      tags:
        - Roles
      operationId: deleteRoleByName
      parameters:
        - in: path
          name: role_name
          description: Role name
          required: true
          schema:
            type: string
      security: []
      responses:
        204:
          description: Role successfully deleted.
        400:
          description: Role name is null or empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: Role name is null or empty
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        404:
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: Role not found
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        default:
          $ref: '#/components/responses/default'

  /roles/{role_name}/users/{username}:
    post:
      tags:
        - Roles
      description: Adds a User to a Role
      operationId: addUserToRole
      security: []
      parameters:
        - in: path
          name: role_name
          description: Role name
          required: true
          schema:
            type: string
        - in: path
          name: username
          description: User name
          required: true
          schema:
            type: string
      responses:
        200:
          description: User added to the role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDTO'
        400:
          description: Either role or username is null or empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: Either role or username is null or empty
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        404:
          description: Role or Username not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: Role or Username not found
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        default:
          $ref: '#/components/responses/default'

    delete:
      description: Removes a User from a Role
      tags:
        - Roles
      operationId: deleteUserFromRole
      parameters:
        - in: path
          name: role_name
          description: Role name
          required: true
          schema:
            type: string
        - in: path
          name: username
          description: User name
          required: true
          schema:
            type: string
      security: []
      responses:
        200:
          description: User from a role is removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDTO'
        400:
          description: Either role or username is null or empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: Either role or username is null or empty
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        404:
          description: Role or Username not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: Role or Username not found
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        default:
          $ref: '#/components/responses/default'

  /roles/{role_name}/permissions:
    post:
      tags:
        - Roles
      description: Adds a Permission to a Role
      operationId: addRolePermission
      security: []
      parameters:
        - in: path
          name: role_name
          description: Role name
          required: true
          schema:
            type: string
      requestBody:
        description: Permission Blueprint
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionBlueprintDTO'
      responses:
        200:
          description: Permission to a Role is added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDTO'
        400:
          description: Access type NONE not supported, or role name is null or empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: Access type NONE not supported
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        404:
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: Role not found
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        default:
          $ref: '#/components/responses/default'

  /roles/{role_name}/permissions/{perm_id}:
    delete:
      description: Removes a Permission from a Role
      tags:
        - Roles
      operationId: removeRolePermission
      parameters:
        - in: path
          name: role_name
          description: Role name
          required: true
          schema:
            type: string
        - in: path
          name: perm_id
          description: Permission Id
          required: true
          schema:
            type: string
      security: []
      responses:
        200:
          description: Permission is removed from a role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDTO'
        400:
          description: Role name is null or empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: Role name is null or empty
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        404:
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: Role not found
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        default:
          $ref: '#/components/responses/default'

  /serials:
    get:
      description: Retrieves a list of Certificate Serials
      tags:
        - CertificateSerial
      operationId: getCertificateSerials
      x-java-response:
        type: Iterable
        isContainer: true
      security: []
      responses:
        200:
          description: A list of certificate serials
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CertificateSerialDTO'
        default:
          $ref: '#/components/responses/default'

  /serials/{id}:
    get:
      description: Retrieves a single Certificate Serial
      tags:
        - CertificateSerial
      operationId: getCertificateSerial
      security: []
      parameters:
        - name: id
          in: path
          description: The ID of the certificate serial to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateSerialDTO'
        404:
          description: A certificate serial could not be found using the provided ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: A certificate serial could not be found using the provided ID
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        default:
          $ref: '#/components/responses/default'

  /status:
    get:
      description: Returns status of the server
      tags:
        - Status
      operationId: status
      security: []
      responses:
        200:
          description: Status information about running Candlepin server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusDTO'
        default:
          $ref: '#/components/responses/default'

  /subscriptions:
    get:
      description: Retrieves a list of Subscriptions
      tags:
        - Subscription
      operationId: getSubscriptions
      security: []
      responses:
        200:
          description: A list of subscriptions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubscriptionDTO'
        default:
          $ref: '#/components/responses/default'

    post:
      description: Activates a Subscription
      tags:
        - Subscription
      operationId: activateSubscription
      security: []
      x-java-response:
        type: javax.ws.rs.core.Response
      parameters:
        - name: consumer_uuid
          in: query
          description: The UUID of the consumer of the subscription
          required: true
          schema:
            type: string
        - name: email
          in: query
          description: The email to send a notification to for the activation
          required: true
          schema:
            type: string
        - name: email_locale
          in: query
          description: The locale of the email to send a notification to for the activation
          required: true
          schema:
            type: string
      responses:
        202:
          description: A Subscription is being activated
        400:
          description: Invalid request such as missing email/locale or when the consumer with the given uuid was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: The consumer with the given uuid was not found
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        default:
          $ref: '#/components/responses/default'

  /subscriptions/{id}:
    delete:
      description: Removes a Subscription
      tags:
        - Subscription
      operationId: deleteSubscription
      security: []
      parameters:
        - name: id
          in: path
          description: The ID of the subscription to remove
          required: true
          schema:
            type: string
      responses:
        204:
          description: Subscription was successfully deleted
        404:
          description: Subscription could not be found using the provided ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
              example:
                displayMessage: Subscription could not be found using the provided ID
                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a
        default:
          $ref: '#/components/responses/default'

components:
  responses:
    default:
      description: An unexpected exception has occurred
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ExceptionMessage'
          example:
            displayMessage: An unexpected exception has occurred
            requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a

  schemas:
    TimestampedEntity:
      properties:
        created:
          type: string
          format: date-time
          example: "2020-04-23 03:23:50.927000"
        updated:
          type: string
          format: date-time
          example: "2020-04-23 03:23:50.927000"

    ExceptionMessage:
      description: An exception has occurred
      properties:
        displayMessage:
          type: string
        requestUuid:
          type: string

    Link:
      description: Used to represent a link to a top level resource in Candlepin
      properties:
        rel:
          type: string
        href:
          type: string

    AsyncJobStatusDTO:
      description: DTO representing an async job status
      allOf:
        - $ref: '#/components/schemas/TimestampedEntity'
        - type: object
          properties:
            id:
              type: string
              example: "ff808081554a3e4101554a3e9033005d"
            key:
              type: string
              example: "RefreshPoolsJob"
            name:
              type: string
              example: "refresh pools job"
            group:
              type: string
              example: "refresh"
            origin:
              type: string
              example: "candlepin.myhost.com"
            executor:
              type: string
              example: "candlepin.myhost.com"
            principal:
              type: string
              example: "admin"
            state:
              type: string
              example: "RUNNING"
            previousState:
              type: string
              example: "QUEUED"
            startTime:
              type: string
              format: date-time
              example: "2019-05-08 09:42:37.000"
            endTime:
              type: string
              format: date-time
              example: "2019-05-08 09:42:37.000"
            attempts:
              type: integer
              example: "1"
            maxAttempts:
              type: integer
              example: "3"
            statusPath:
              type: string
              example: "/jobs/ff808081554a3e4101554a3e9033005d"
            resultData:
              type: object
              example: "Refresh completed successfully!"

    ActivationKeyDTO:
      description: A token that allows registration without username/password and sets subscription and content related properties at registration.
      allOf:
        - $ref: '#/components/schemas/TimestampedEntity'
        - type: object
          properties:
            id:
              type: string
            name:
              type: string
            description:
              type: string
            owner:
              $ref: '#/components/schemas/NestedOwnerDTO'
            releaseVer:
              $ref: '#/components/schemas/ReleaseVerDTO'
            serviceLevel:
              type: string
            usage:
              type: string
            role:
              type: string
            addOns:
              type: array
              uniqueItems: true
              items:
                type: string
            autoAttach:
              type: boolean
            pools:
              type: array
              uniqueItems: true
              items:
                $ref: '#/components/schemas/ActivationKeyPoolDTO'
            products:
              type: array
              uniqueItems: true
              items:
                $ref: '#/components/schemas/ActivationKeyProductDTO'
            contentOverrides:
              type: array
              uniqueItems: true
              items:
                $ref: '#/components/schemas/ContentOverrideDTO'

    ActivationKeyProductDTO:
      required:
        - productId
      properties:
        productId:
          type: string
          minLength: 1

    ActivationKeyPoolDTO:
      required:
        - poolId
      properties:
        poolId:
          type: string
          minLength: 1
        quantity:
          type: integer
          format: int64

    AttributeDTO:
      description: Represents the attribute as a name-value pair
      properties:
        name:
          type: string
        value:
          type: string

    BrandingDTO:
      description: Represents the branding. It indicates that a particular engineering product ID is being rebranded by the entitlement to the given name. The type is used by clients to determine what action to take with the brand name.
      allOf:
        - $ref: '#/components/schemas/TimestampedEntity'
        - type: object
          required:
            - productId
            - name
            - type
          properties:
            productId:
              type: string
              minLength: 1
              maxLength: 255
            name:
              type: string
              minLength: 1
              maxLength: 255
            type:
              type: string
              minLength: 1
              maxLength: 32

    CertificateSerialDTO:
      description: Represents a database sequence used to ensure certificates receive unique serial numbers
      allOf:
        - $ref: '#/components/schemas/TimestampedEntity'
        - type: object
          properties:
            id:
              type: string
            serial:
              type: string
            expiration:
              type: string
              format: date-time
            collected:
              type: boolean
            revoked:
              type: boolean

    CertificateDTO:
      description: Represents certificate details
      allOf:
        - $ref: '#/components/schemas/TimestampedEntity'
        - type: object
          properties:
            id:
              type: string
            key:
              type: string
            cert:
              type: string
            serial:
              $ref: '#/components/schemas/CertificateSerialDTO'

    ConsumerTypeDTO:
      description: Represents a consumer type used to differentiate various types of consumers
      allOf:
        - $ref: '#/components/schemas/TimestampedEntity'
        - type: object
          properties:
            id:
              type: string
            label:
              type: string
            manifest:
              type: boolean

    ContentDTO:
      description: Represents the content data exposed to the API.
      required:
        - id
        - uuid
      allOf:
        - $ref: '#/components/schemas/TimestampedEntity'
        - type: object
          properties:
            uuid:
              type: string
              minLength: 1
              example: "ff808081554a3e4101554a3e9033005d"
            id:
              type: string
              minLength: 1
              example: "5001"
            type:
              type: string
              example: "yum"
            label:
              type: string
              example: "content_label"
            name:
              type: string
              example: "content_name"
            vendor:
              type: string
              example: "example-vendor"
            contentUrl:
              type: string
              example: "/admin/foo/example/path"
            requiredTags:
              type: string
              example: "TAG1,TAG2"
            releaseVer:
              type: string
              example: "1.2.3"
            gpgUrl:
              type: string
              example: "/admin/foo/example/gpg/path"
            modifiedProductIds:
              type: array
              uniqueItems: true
              example: "[5051,5052,5053]"
              items:
                type: string
            arches:
              type: string
              example: "x86_64"
            metadataExpire:
              type: integer
              format: int64
              example: 1467124079

    ContentOverrideDTO:
      description: Represents a content override for an activation key or consumer
      allOf:
        - $ref: '#/components/schemas/TimestampedEntity'
        - type: object
          required:
            - name
            - contentLabel
          properties:
            name:
              type: string
              minLength: 1
            contentLabel:
              type: string
              minLength: 1
            value:
              type: string

    CdnDTO:
      description: DTO representing a Cdn
      allOf:
        - $ref: '#/components/schemas/TimestampedEntity'
        - type: object
          properties:
            id:
              type: string
            label:
              type: string
            name:
              type: string
            url:
              type: string
            certificate:
              $ref: '#/components/schemas/CertificateDTO'

    DeletedConsumerDTO:
      description: Represents a deleted consumer
      allOf:
        - $ref: '#/components/schemas/TimestampedEntity'
        - properties:
            id:
              type: string
            consumerUuid:
              type: string
            ownerId:
              type: string
            ownerKey:
              type: string
            ownerDisplayName:
              type: string
            principalName:
              type: string

    DistributorVersionDTO:
      description: A DTO representation of the DistributorVersion
      allOf:
        - $ref: '#/components/schemas/TimestampedEntity'
        - type: object
          properties:
            id:
              type: string
            name:
              type: string
            displayName:
              type: string
            capabilities:
              type: array
              uniqueItems: true
              items:
                $ref: '#/components/schemas/DistributorVersionCapabilityDTO'

    DistributorVersionCapabilityDTO:
      description: A DTO representation of the DistributorVersionCapability
      type: object
      required:
        - name
      properties:
        id:
          type: string
        name:
          type: string
          minLength: 1

    EnvironmentContentDTO:
      description: EnvironmentContent represents the promotion of content into a particular environment.
      properties:
        content:
          $ref: "#/components/schemas/ContentDTO"
        enabled:
          type: boolean

    EnvironmentDTO:
      description: Represents an environment within an org used to enable/disable/promote content
        in specific places.
      allOf:
        - $ref: '#/components/schemas/TimestampedEntity'
        - type: object
          properties:
            id:
              type: string
            name:
              type: string
            description:
              type: string
            owner:
              $ref: "#/components/schemas/NestedOwnerDTO"
            environmentContent:
              type: array
              uniqueItems: true
              items:
                $ref: "#/components/schemas/EnvironmentContentDTO"

    GuestIdDTO:
      description: Represents a guest ID running on a virt host consumer
      allOf:
        - $ref: '#/components/schemas/TimestampedEntity'
        - type: object
          properties:
            id:
              type: string
            guestId:
              type: string
            attributes:
              type: object
              additionalProperties:
                type: string

    GuestIdDTOArrayElement:
      description: Represents a guest ID running on a virt host consumer. Does not include the attributes field
      allOf:
        - $ref: '#/components/schemas/TimestampedEntity'
        - type: object
          properties:
            id:
              type: string
            guestId:
              type: string

    NestedEntitlementDTO:
      properties:
        id:
          type: string
        href:
          type: string

    NestedOwnerDTO:
      properties:
        id:
          type: string
        key:
          type: string
        displayName:
          type: string
        href:
          type: string

    OwnerDTO:
      description: DTO representing an owner/organization
      allOf:
        - $ref: '#/components/schemas/TimestampedEntity'
        - type: object
          properties:
            id:
              type: string
            displayName:
              type: string
            key:
              type: string
            contentPrefix:
              type: string
            defaultServiceLevel:
              type: string
            logLevel:
              type: string
            contentAccessMode:
              type: string
            contentAccessModeList:
              type: string
            autobindHypervisorDisabled:
              type: boolean
            autobindDisabled:
              type: boolean
            lastRefreshed:
              type: string
              format: date-time
            parentOwner:
              $ref: '#/components/schemas/NestedOwnerDTO'
            upstreamConsumer:
              $ref: '#/components/schemas/UpstreamConsumerDTO'

    PermissionBlueprintDTO:
      description: Represents the permission blueprints exposed to the API layer
      allOf:
        - $ref: '#/components/schemas/TimestampedEntity'
        - type: object
          properties:
            id:
              type: string
              example: "ff808081554a3e4101554a3e9033005d"
            owner:
              $ref: "#/components/schemas/NestedOwnerDTO"
            type:
              type: string
              example: "OWNER"
            access:
              type: string
              example: "NONE"

    PoolDTO:
      description: Represents a pool of products eligible to be consumed (entitled)
      allOf:
        - $ref: '#/components/schemas/TimestampedEntity'
        - type: object
          properties:
            id:
              type: string
            type:
              type: string
            owner:
              $ref: '#/components/schemas/NestedOwnerDTO'
            activeSubscription:
              type: boolean
            sourceEntitlement:
              $ref: '#/components/schemas/NestedEntitlementDTO'
            quantity:
              type: integer
              format: int64
            startDate:
              type: string
              format: date-time
            endDate:
              type: string
              format: date-time
            attributes:
              type: array
              items:
                $ref: '#/components/schemas/AttributeDTO'
            restrictedToUsername:
              type: string
            contractNumber:
              type: string
            accountNumber:
              type: string
            orderNumber:
              type: string
            consumed:
              type: integer
              format: int64
            exported:
              type: integer
              format: int64
            branding:
              type: array
              uniqueItems: true
              items:
                $ref: '#/components/schemas/BrandingDTO'
            calculatedAttributes:
              type: object
              additionalProperties:
                type: string
            upstreamPoolId:
              type: string
            upstreamEntitlementId:
              type: string
            upstreamConsumerId:
              type: string
            productName:
              type: string
            productId:
              type: string
            productAttributes:
              type: array
              items:
                $ref: '#/components/schemas/AttributeDTO'
            stackId:
              type: string
            stacked:
              type: boolean
            sourceStackId:
              type: string
            developmentPool:
              type: boolean
            href:
              type: string
            derivedProductAttributes:
              type: array
              items:
                $ref: '#/components/schemas/AttributeDTO'
            derivedProductId:
              type: string
            derivedProductName:
              type: string
            providedProducts:
              type: array
              uniqueItems: true
              items:
                $ref: '#/components/schemas/ProvidedProductDTO'
            derivedProvidedProducts:
              type: array
              uniqueItems: true
              items:
                $ref: '#/components/schemas/ProvidedProductDTO'
            subscriptionSubKey:
              type: string
            subscriptionId:
              type: string
            locked:
              type: boolean

    ProductContentDTO:
      description: Product content mapping exposed to the API
      required:
        - content
      properties:
        content:
          $ref: "#/components/schemas/ContentDTO"
        enabled:
          type: boolean

    ProductDTO:
      description: DTO representing the product data exposed to the API
      allOf:
        - $ref: '#/components/schemas/TimestampedEntity'
        - type: object
          properties:
            id:
              type: string
              example: 5051
            uuid:
              type: string
              example: ff808081554a3e4101554a3e9033005d
            name:
              type: string
              example: Admin OS Developer Bits
            multiplier:
              type: integer
              format: int64
              example: 1
            attributes:
              type: array
              items:
                $ref: '#/components/schemas/AttributeDTO'
            productContent:
              type: array
              uniqueItems: true
              items:
                $ref: "#/components/schemas/ProductContentDTO"
            dependentProductIds:
              type: array
              uniqueItems: true
              items:
                type: string
            branding:
              type: array
              uniqueItems: true
              items:
                $ref: "#/components/schemas/BrandingDTO"
            href:
              type: string
              example: /products/ff808081554a3e4101554a3e9033005d

    ProvidedProductDTO:
      description: ProvidedProduct DTO representation
      required:
        - productId
      properties:
        productId:
          type: string
          minLength: 1
        productName:
          type: string

    ReleaseVerDTO:
      properties:
        releaseVer:
          type: string

    RoleDTO:
      description: Represent the relationship between users and the permissions they have
      allOf:
        - $ref: '#/components/schemas/TimestampedEntity'
        - type: object
          properties:
            id:
              type: string
              example: "ff808081554a3e4101554a3e9033005d"
            name:
              type: string
              example: "admin-all"
            users:
              type: array
              uniqueItems: true
              items:
                "$ref": "#/components/schemas/UserDTO"
            permissions:
              type: array
              items:
                "$ref": "#/components/schemas/PermissionBlueprintDTO"

    SchedulerStatusDTO:
      description: Represents scheduler status
      properties:
        isRunning:
          type: boolean

    StatusDTO:
      description: Version and Status information about running Candlepin server
      properties:
        mode:
          type: string
        modeReason:
          type: string
        modeChangeTime:
          type: string
          format: date-time
        result:
          type: boolean
          example: true
        version:
          type: string
          example: 0.9.10
        release:
          type: string
        standalone:
          type: boolean
        timeUTC:
          type: string
          format: date-time
        rulesSource:
          type: string
        rulesVersion:
          type: string
          example: 5.8
        managerCapabilities:
          type: array
          uniqueItems: true
          items:
            type: string
        keycloakRealm:
          type: string
        keycloakAuthUrl:
          type: string
        keycloakResource:
          type: string

    SubscriptionDTO:
      description: Represents the Subscription data exposed to the API
      allOf:
        - $ref: '#/components/schemas/TimestampedEntity'
        - type: object
          properties:
            id:
              type: string
            owner:
              $ref: "#/components/schemas/NestedOwnerDTO"
            product:
              $ref: "#/components/schemas/ProductDTO"
            derivedProduct:
              $ref: "#/components/schemas/ProductDTO"
            providedProducts:
              type: array
              uniqueItems: true
              items:
                "$ref": "#/components/schemas/ProductDTO"
            derivedProvidedProducts:
              type: array
              uniqueItems: true
              items:
                $ref: "#/components/schemas/ProductDTO"
            quantity:
              type: integer
              format: int64
            startDate:
              type: string
              format: date-time
              example: "2019-05-08 09:42:37.000"
            endDate:
              type: string
              format: date-time
              example: "2019-05-08 09:42:37.000"
            contractNumber:
              type: string
            accountNumber:
              type: string
            modified:
              type: string
              format: date-time
              example: "2019-05-08 09:42:37.000"
            lastModified:
              type: string
              format: date-time
              example: "2019-05-08 09:42:37.000"
            orderNumber:
              type: string
            upstreamPoolId:
              type: string
            upstreamEntitlementId:
              type: string
            upstreamConsumerId:
              type: string
            cert:
              $ref: "#/components/schemas/CertificateDTO"
            cdn:
              $ref: "#/components/schemas/CdnDTO"
            stacked:
              type: boolean
            stackId:
              type: string

    UserDTO:
      description: "Represents user information for a given user"
      allOf:
        - $ref: '#/components/schemas/TimestampedEntity'
        - type: object
          properties:
            id:
              type: string
              example: "ff808081554a3e4101554a3e9033005d"
            username:
              type: string
              example: "admin"
            password:
              type: string
              example: "secret_banana"
              writeOnly: true
            superAdmin:
              type: boolean
              example: true
              default: false

    UpstreamConsumerDTO:
      description: DTO representing an upstream consumer
      allOf:
        - $ref: '#/components/schemas/TimestampedEntity'
        - type: object
          properties:
            id:
              type: string
            uuid:
              type: string
            name:
              type: string
            apiUrl:
              type: string
            webUrl:
              type: string
            ownerId:
              type: string
            contentAccessMode:
              type: string
            type:
              $ref: '#/components/schemas/ConsumerTypeDTO'
            idCert:
              $ref: '#/components/schemas/CertificateDTO'

  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
