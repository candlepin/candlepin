openapi: 3.0.2
info:
  title: Candlepin
  description: Candlepin is a subscription management server written in Java. It helps with management of software subscriptions.
  version: 3.0.0-draft

servers:
  - url: /candlepin

security:
  - basicAuth: []

paths:
  /:
    get:
      description: Retrieves a list of links corresponding to Root resources
      tags:
        - root
      operationId: getRootResources
      security: []  # this resource doesn't require auth
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Link'
        default:
          description: An exception occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'

  /consumertypes:
    get:
      description: Retrieves a list of known consumer types
      tags:
          - Consumer
          - ConsumerType
      operationId: getConsumerTypes
      x-java-response-container-type: Iterable
      security: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConsumerTypeDTO'
        default:
          description: An unexpected exception occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'

    post:
      description: Creates a new consumer type
      tags:
        - Consumer
        - ConsumerType
      operationId: createConsumerType
      security: []
      requestBody:
          description: The consumer type to create
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerTypeDTO'
      responses:
        200:
          description: ''
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ConsumerTypeDTO'
        default:
          description: An unexpected exception occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'


  /consumertypes/{id}:
    get:
      description: Retrieves a specific consumer type
      tags:
          - Consumer
          - ConsumerType
      operationId: getConsumerType
      security: []
      parameters:
      - name: id
        in: path
        description: The ID of the consumer type to retrieve
        required: true
        schema:
          type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerTypeDTO'
        404:
          description: A consumer type could not be found using the provided ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
        default:
          description: An unexpected exception occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'

    put:
      description: Updates an existing consumer type
      tags:
        - Consumer
        - ConsumerType
      operationId: updateConsumerType
      security: []
      parameters:
      - name: id
        in: path
        description: The ID of the consumer type to update
        required: true
        schema:
          type: string
      requestBody:
          description: The fields and updated values to apply to the specified consumer type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerTypeDTO'
      responses:
        200:
          description: ''
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ConsumerTypeDTO'
        404:
          description: A consumer type could not be found using the provided ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
        default:
          description: An unexpected exception occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'

    delete:
      description: Deletes an existing consumer type
      tags:
          - Consumer
          - ConsumerType
      operationId: deleteConsumerType
      security: []
      parameters:
      - name: id
        in: path
        description: The ID of the consumer type to delete
        required: true
        schema:
          type: string
      responses:
        200:
          description: ''
          content: {}
        404:
          description: A consumer type could not be found using the provided ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
        default:
          description: An unexpected exception occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'

components:
  schemas:
    TimestampedEntity:
      properties:
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time

    ExceptionMessage:
      description: An exception occurred
      properties:
        displayMessage:
          type: string
        requestUuid:
          type: string
    Link:
      description: Used to represent a link to a top level resource in Candlepin
      properties:
        rel:
          type: string
        href:
          type: string

    CertificateSerialDTO:
      description: Represents a database sequence used to ensure certificates receive unique serial numbers
      allOf:
        - $ref: '#/components/schemas/TimestampedEntity'
        - type: object
          properties:
            id:
              type: string
            serial:
              type: string
            expiration:
              type: string
              format: date-time
            collected:
              type: boolean
            revoked:
              type: boolean

    ConsumerTypeDTO:
      description: Represents a consumer type used to differentiate various types of consumers
      allOf:
        - $ref: '#/components/schemas/TimestampedEntity'
        - type: object
          properties:
            id:
              type: string
            label:
              type: string
            manifest:
              type: boolean

    AsyncJobStatusDTO:
      description: DTO representing an async job status
      allOf:
        - $ref: '#/components/schemas/TimestampedEntity'
        - type: object
          properties:
            id:
              type: string
              example: "ff808081554a3e4101554a3e9033005d"
            key:
              type: string
              example: "RefreshPoolsJob"
            name:
              type: string
              example: "refresh pools job"
            group:
              type: string
              example: "refresh"
            origin:
              type: string
              example: "candlepin.myhost.com"
            executor:
              type: string
              example: "candlepin.myhost.com"
            principal:
              type: string
              example: "admin"
            state:
              type: string
              example: "RUNNING"
            previousState:
              type: string
              example: "QUEUED"
            startTime:
              type: string
              format: date-time
              example: "2019-05-08 09:42:37.000"
            endTime:
              type: string
              format: date-time
              example: "2019-05-08 09:42:37.000"
            attempts:
              type: integer
              example: "1"
            maxAttempts:
              type: integer
              example: "3"
            statusPath:
              type: string
              example: "/jobs/ff808081554a3e4101554a3e9033005d"
            resultData:
              type: object
              example: "Refresh completed successfully!"
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
